
smarthome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00003712  000037a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800072  00800072  000037b8  2**0
                  ALLOC
  3 .stab         00003c6c  00000000  00000000  000037b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ba  00000000  00000000  00007424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000088de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b6c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c470  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c85d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d02b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__vector_1>
       8:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_2>
       c:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__vector_10>
      2c:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 87 1b 	jmp	0x370e	; 0x370e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
//////////////////////////////////
u8 motorState = 0;

u16 LDR_reading ;
void main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(DIO_PORTA,LDRPIN,DIO_INPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>

	MDIO_vSetPinDir(DIO_PORTA,MOTORPIN1,DIO_OUTPUT);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA,MOTORPIN2,DIO_OUTPUT);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	63 e0       	ldi	r22, 0x03	; 3
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>


	MADC_vInit();
     b6c:	0e 94 48 10 	call	0x2090	; 0x2090 <MADC_vInit>

while (1){
LDR_func();
     b70:	0e 94 bb 05 	call	0xb76	; 0xb76 <LDR_func>
     b74:	fd cf       	rjmp	.-6      	; 0xb70 <main+0x2a>

00000b76 <LDR_func>:

}
}
void LDR_func(void){
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	6c 97       	sbiw	r28, 0x1c	; 28
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61

LDR_reading=MADC_u16AnalogRead(CHANNEL_0);
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	0e 94 8e 10 	call	0x211c	; 0x211c <MADC_u16AnalogRead>
     b90:	90 93 8c 00 	sts	0x008C, r25
     b94:	80 93 8b 00 	sts	0x008B, r24
	if(LDR_reading>=800 &&motorState==0){
     b98:	80 91 8b 00 	lds	r24, 0x008B
     b9c:	90 91 8c 00 	lds	r25, 0x008C
     ba0:	23 e0       	ldi	r18, 0x03	; 3
     ba2:	80 32       	cpi	r24, 0x20	; 32
     ba4:	92 07       	cpc	r25, r18
     ba6:	08 f4       	brcc	.+2      	; 0xbaa <LDR_func+0x34>
     ba8:	7d c0       	rjmp	.+250    	; 0xca4 <LDR_func+0x12e>
     baa:	80 91 72 00 	lds	r24, 0x0072
     bae:	88 23       	and	r24, r24
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <LDR_func+0x3e>
     bb2:	78 c0       	rjmp	.+240    	; 0xca4 <LDR_func+0x12e>
		MotorUp_Func();
     bb4:	0e 94 df 06 	call	0xdbe	; 0xdbe <MotorUp_Func>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a6 e9       	ldi	r26, 0x96	; 150
     bbe:	b3 e4       	ldi	r27, 0x43	; 67
     bc0:	89 8f       	std	Y+25, r24	; 0x19
     bc2:	9a 8f       	std	Y+26, r25	; 0x1a
     bc4:	ab 8f       	std	Y+27, r26	; 0x1b
     bc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc8:	69 8d       	ldd	r22, Y+25	; 0x19
     bca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	4a ef       	ldi	r20, 0xFA	; 250
     bd6:	54 e4       	ldi	r21, 0x44	; 68
     bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	8d 8b       	std	Y+21, r24	; 0x15
     be2:	9e 8b       	std	Y+22, r25	; 0x16
     be4:	af 8b       	std	Y+23, r26	; 0x17
     be6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     be8:	6d 89       	ldd	r22, Y+21	; 0x15
     bea:	7e 89       	ldd	r23, Y+22	; 0x16
     bec:	8f 89       	ldd	r24, Y+23	; 0x17
     bee:	98 8d       	ldd	r25, Y+24	; 0x18
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bfc:	88 23       	and	r24, r24
     bfe:	2c f4       	brge	.+10     	; 0xc0a <LDR_func+0x94>
		__ticks = 1;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	9c 8b       	std	Y+20, r25	; 0x14
     c06:	8b 8b       	std	Y+19, r24	; 0x13
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <LDR_func+0x112>
	else if (__tmp > 65535)
     c0a:	6d 89       	ldd	r22, Y+21	; 0x15
     c0c:	7e 89       	ldd	r23, Y+22	; 0x16
     c0e:	8f 89       	ldd	r24, Y+23	; 0x17
     c10:	98 8d       	ldd	r25, Y+24	; 0x18
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	3f ef       	ldi	r19, 0xFF	; 255
     c16:	4f e7       	ldi	r20, 0x7F	; 127
     c18:	57 e4       	ldi	r21, 0x47	; 71
     c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c1e:	18 16       	cp	r1, r24
     c20:	4c f5       	brge	.+82     	; 0xc74 <LDR_func+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c22:	69 8d       	ldd	r22, Y+25	; 0x19
     c24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e2       	ldi	r20, 0x20	; 32
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9c 8b       	std	Y+20, r25	; 0x14
     c48:	8b 8b       	std	Y+19, r24	; 0x13
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <LDR_func+0xf4>
     c4c:	88 ec       	ldi	r24, 0xC8	; 200
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	9a 8b       	std	Y+18, r25	; 0x12
     c52:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c54:	89 89       	ldd	r24, Y+17	; 0x11
     c56:	9a 89       	ldd	r25, Y+18	; 0x12
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <LDR_func+0xe2>
     c5c:	9a 8b       	std	Y+18, r25	; 0x12
     c5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	8b 89       	ldd	r24, Y+19	; 0x13
     c62:	9c 89       	ldd	r25, Y+20	; 0x14
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	9c 8b       	std	Y+20, r25	; 0x14
     c68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	8b 89       	ldd	r24, Y+19	; 0x13
     c6c:	9c 89       	ldd	r25, Y+20	; 0x14
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	69 f7       	brne	.-38     	; 0xc4c <LDR_func+0xd6>
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <LDR_func+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c74:	6d 89       	ldd	r22, Y+21	; 0x15
     c76:	7e 89       	ldd	r23, Y+22	; 0x16
     c78:	8f 89       	ldd	r24, Y+23	; 0x17
     c7a:	98 8d       	ldd	r25, Y+24	; 0x18
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	9c 8b       	std	Y+20, r25	; 0x14
     c86:	8b 8b       	std	Y+19, r24	; 0x13
     c88:	8b 89       	ldd	r24, Y+19	; 0x13
     c8a:	9c 89       	ldd	r25, Y+20	; 0x14
     c8c:	98 8b       	std	Y+16, r25	; 0x10
     c8e:	8f 87       	std	Y+15, r24	; 0x0f
     c90:	8f 85       	ldd	r24, Y+15	; 0x0f
     c92:	98 89       	ldd	r25, Y+16	; 0x10
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <LDR_func+0x11e>
     c98:	98 8b       	std	Y+16, r25	; 0x10
     c9a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		motorState =1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 72 00 	sts	0x0072, r24
     ca2:	84 c0       	rjmp	.+264    	; 0xdac <LDR_func+0x236>



	}
	else if(LDR_reading<800 && motorState == 1){
     ca4:	80 91 8b 00 	lds	r24, 0x008B
     ca8:	90 91 8c 00 	lds	r25, 0x008C
     cac:	23 e0       	ldi	r18, 0x03	; 3
     cae:	80 32       	cpi	r24, 0x20	; 32
     cb0:	92 07       	cpc	r25, r18
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <LDR_func+0x140>
     cb4:	7b c0       	rjmp	.+246    	; 0xdac <LDR_func+0x236>
     cb6:	80 91 72 00 	lds	r24, 0x0072
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <LDR_func+0x14a>
     cbe:	76 c0       	rjmp	.+236    	; 0xdac <LDR_func+0x236>
		MotorDown_Func();
     cc0:	0e 94 78 07 	call	0xef0	; 0xef0 <MotorDown_Func>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a6 e9       	ldi	r26, 0x96	; 150
     cca:	b3 e4       	ldi	r27, 0x43	; 67
     ccc:	8b 87       	std	Y+11, r24	; 0x0b
     cce:	9c 87       	std	Y+12, r25	; 0x0c
     cd0:	ad 87       	std	Y+13, r26	; 0x0d
     cd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cda:	9e 85       	ldd	r25, Y+14	; 0x0e
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	4a ef       	ldi	r20, 0xFA	; 250
     ce2:	54 e4       	ldi	r21, 0x44	; 68
     ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	8f 83       	std	Y+7, r24	; 0x07
     cee:	98 87       	std	Y+8, r25	; 0x08
     cf0:	a9 87       	std	Y+9, r26	; 0x09
     cf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf4:	6f 81       	ldd	r22, Y+7	; 0x07
     cf6:	78 85       	ldd	r23, Y+8	; 0x08
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d08:	88 23       	and	r24, r24
     d0a:	2c f4       	brge	.+10     	; 0xd16 <LDR_func+0x1a0>
		__ticks = 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9e 83       	std	Y+6, r25	; 0x06
     d12:	8d 83       	std	Y+5, r24	; 0x05
     d14:	3f c0       	rjmp	.+126    	; 0xd94 <LDR_func+0x21e>
	else if (__tmp > 65535)
     d16:	6f 81       	ldd	r22, Y+7	; 0x07
     d18:	78 85       	ldd	r23, Y+8	; 0x08
     d1a:	89 85       	ldd	r24, Y+9	; 0x09
     d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	3f ef       	ldi	r19, 0xFF	; 255
     d22:	4f e7       	ldi	r20, 0x7F	; 127
     d24:	57 e4       	ldi	r21, 0x47	; 71
     d26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	4c f5       	brge	.+82     	; 0xd80 <LDR_func+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d30:	7c 85       	ldd	r23, Y+12	; 0x0c
     d32:	8d 85       	ldd	r24, Y+13	; 0x0d
     d34:	9e 85       	ldd	r25, Y+14	; 0x0e
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e2       	ldi	r20, 0x20	; 32
     d3c:	51 e4       	ldi	r21, 0x41	; 65
     d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	9e 83       	std	Y+6, r25	; 0x06
     d54:	8d 83       	std	Y+5, r24	; 0x05
     d56:	0f c0       	rjmp	.+30     	; 0xd76 <LDR_func+0x200>
     d58:	88 ec       	ldi	r24, 0xC8	; 200
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9c 83       	std	Y+4, r25	; 0x04
     d5e:	8b 83       	std	Y+3, r24	; 0x03
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <LDR_func+0x1ee>
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	69 f7       	brne	.-38     	; 0xd58 <LDR_func+0x1e2>
     d7e:	14 c0       	rjmp	.+40     	; 0xda8 <LDR_func+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d80:	6f 81       	ldd	r22, Y+7	; 0x07
     d82:	78 85       	ldd	r23, Y+8	; 0x08
     d84:	89 85       	ldd	r24, Y+9	; 0x09
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	9a 83       	std	Y+2, r25	; 0x02
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <LDR_func+0x22a>
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		motorState =0;
     da8:	10 92 72 00 	sts	0x0072, r1
	}
}
     dac:	6c 96       	adiw	r28, 0x1c	; 28
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <MotorUp_Func>:
void MotorUp_Func(void){
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPinVal(DIO_PORTA,MOTORPIN1,DIO_HIGH);
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	62 e0       	ldi	r22, 0x02	; 2
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(DIO_PORTA,MOTORPIN2,DIO_LOW);
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	63 e0       	ldi	r22, 0x03	; 3
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	a8 ec       	ldi	r26, 0xC8	; 200
     dec:	b2 e4       	ldi	r27, 0x42	; 66
     dee:	8b 87       	std	Y+11, r24	; 0x0b
     df0:	9c 87       	std	Y+12, r25	; 0x0c
     df2:	ad 87       	std	Y+13, r26	; 0x0d
     df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df6:	6b 85       	ldd	r22, Y+11	; 0x0b
     df8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	4a ef       	ldi	r20, 0xFA	; 250
     e04:	54 e4       	ldi	r21, 0x44	; 68
     e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	8f 83       	std	Y+7, r24	; 0x07
     e10:	98 87       	std	Y+8, r25	; 0x08
     e12:	a9 87       	std	Y+9, r26	; 0x09
     e14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e16:	6f 81       	ldd	r22, Y+7	; 0x07
     e18:	78 85       	ldd	r23, Y+8	; 0x08
     e1a:	89 85       	ldd	r24, Y+9	; 0x09
     e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e8       	ldi	r20, 0x80	; 128
     e24:	5f e3       	ldi	r21, 0x3F	; 63
     e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e2a:	88 23       	and	r24, r24
     e2c:	2c f4       	brge	.+10     	; 0xe38 <MotorUp_Func+0x7a>
		__ticks = 1;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9e 83       	std	Y+6, r25	; 0x06
     e34:	8d 83       	std	Y+5, r24	; 0x05
     e36:	3f c0       	rjmp	.+126    	; 0xeb6 <MotorUp_Func+0xf8>
	else if (__tmp > 65535)
     e38:	6f 81       	ldd	r22, Y+7	; 0x07
     e3a:	78 85       	ldd	r23, Y+8	; 0x08
     e3c:	89 85       	ldd	r24, Y+9	; 0x09
     e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	3f ef       	ldi	r19, 0xFF	; 255
     e44:	4f e7       	ldi	r20, 0x7F	; 127
     e46:	57 e4       	ldi	r21, 0x47	; 71
     e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e4c:	18 16       	cp	r1, r24
     e4e:	4c f5       	brge	.+82     	; 0xea2 <MotorUp_Func+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e50:	6b 85       	ldd	r22, Y+11	; 0x0b
     e52:	7c 85       	ldd	r23, Y+12	; 0x0c
     e54:	8d 85       	ldd	r24, Y+13	; 0x0d
     e56:	9e 85       	ldd	r25, Y+14	; 0x0e
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	51 e4       	ldi	r21, 0x41	; 65
     e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	bc 01       	movw	r22, r24
     e6a:	cd 01       	movw	r24, r26
     e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	9e 83       	std	Y+6, r25	; 0x06
     e76:	8d 83       	std	Y+5, r24	; 0x05
     e78:	0f c0       	rjmp	.+30     	; 0xe98 <MotorUp_Func+0xda>
     e7a:	88 ec       	ldi	r24, 0xC8	; 200
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9c 83       	std	Y+4, r25	; 0x04
     e80:	8b 83       	std	Y+3, r24	; 0x03
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <MotorUp_Func+0xc8>
     e8a:	9c 83       	std	Y+4, r25	; 0x04
     e8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	9e 81       	ldd	r25, Y+6	; 0x06
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	69 f7       	brne	.-38     	; 0xe7a <MotorUp_Func+0xbc>
     ea0:	14 c0       	rjmp	.+40     	; 0xeca <MotorUp_Func+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea2:	6f 81       	ldd	r22, Y+7	; 0x07
     ea4:	78 85       	ldd	r23, Y+8	; 0x08
     ea6:	89 85       	ldd	r24, Y+9	; 0x09
     ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <MotorUp_Func+0x104>
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		MDIO_vSetPinVal(DIO_PORTA,MOTORPIN1,DIO_LOW);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	62 e0       	ldi	r22, 0x02	; 2
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTA,MOTORPIN2,DIO_LOW);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	63 e0       	ldi	r22, 0x03	; 3
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>

}
     ede:	2e 96       	adiw	r28, 0x0e	; 14
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <MotorDown_Func>:
void MotorDown_Func(void){
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	2e 97       	sbiw	r28, 0x0e	; 14
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPinVal(DIO_PORTA,MOTORPIN2,DIO_HIGH);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	63 e0       	ldi	r22, 0x03	; 3
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTA,MOTORPIN1,DIO_LOW);
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	62 e0       	ldi	r22, 0x02	; 2
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a8 ec       	ldi	r26, 0xC8	; 200
     f1e:	b2 e4       	ldi	r27, 0x42	; 66
     f20:	8b 87       	std	Y+11, r24	; 0x0b
     f22:	9c 87       	std	Y+12, r25	; 0x0c
     f24:	ad 87       	std	Y+13, r26	; 0x0d
     f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f28:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	4a ef       	ldi	r20, 0xFA	; 250
     f36:	54 e4       	ldi	r21, 0x44	; 68
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8f 83       	std	Y+7, r24	; 0x07
     f42:	98 87       	std	Y+8, r25	; 0x08
     f44:	a9 87       	std	Y+9, r26	; 0x09
     f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	2c f4       	brge	.+10     	; 0xf6a <MotorDown_Func+0x7a>
		__ticks = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8d 83       	std	Y+5, r24	; 0x05
     f68:	3f c0       	rjmp	.+126    	; 0xfe8 <MotorDown_Func+0xf8>
	else if (__tmp > 65535)
     f6a:	6f 81       	ldd	r22, Y+7	; 0x07
     f6c:	78 85       	ldd	r23, Y+8	; 0x08
     f6e:	89 85       	ldd	r24, Y+9	; 0x09
     f70:	9a 85       	ldd	r25, Y+10	; 0x0a
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	57 e4       	ldi	r21, 0x47	; 71
     f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f7e:	18 16       	cp	r1, r24
     f80:	4c f5       	brge	.+82     	; 0xfd4 <MotorDown_Func+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f82:	6b 85       	ldd	r22, Y+11	; 0x0b
     f84:	7c 85       	ldd	r23, Y+12	; 0x0c
     f86:	8d 85       	ldd	r24, Y+13	; 0x0d
     f88:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9e 83       	std	Y+6, r25	; 0x06
     fa8:	8d 83       	std	Y+5, r24	; 0x05
     faa:	0f c0       	rjmp	.+30     	; 0xfca <MotorDown_Func+0xda>
     fac:	88 ec       	ldi	r24, 0xC8	; 200
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9c 83       	std	Y+4, r25	; 0x04
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <MotorDown_Func+0xc8>
     fbc:	9c 83       	std	Y+4, r25	; 0x04
     fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	9e 81       	ldd	r25, Y+6	; 0x06
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f7       	brne	.-38     	; 0xfac <MotorDown_Func+0xbc>
     fd2:	14 c0       	rjmp	.+40     	; 0xffc <MotorDown_Func+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd4:	6f 81       	ldd	r22, Y+7	; 0x07
     fd6:	78 85       	ldd	r23, Y+8	; 0x08
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	9a 85       	ldd	r25, Y+10	; 0x0a
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <MotorDown_Func+0x104>
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		MDIO_vSetPinVal(DIO_PORTA,MOTORPIN1,DIO_LOW);
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	62 e0       	ldi	r22, 0x02	; 2
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
		MDIO_vSetPinVal(DIO_PORTA,MOTORPIN2,DIO_LOW);
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	63 e0       	ldi	r22, 0x03	; 3
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
}
    1010:	2e 96       	adiw	r28, 0x0e	; 14
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <MWDT_vEnable>:

#include "WDT_int.h"
#include "WDT_prv.h"

void MWDT_vEnable(u8 A_u8TimeOut)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
	/* Set timeout*/
	WDTCR = (WDTCR & 0xF8) | (A_u8TimeOut & 0x07);
    102e:	a1 e4       	ldi	r26, 0x41	; 65
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e4       	ldi	r30, 0x41	; 65
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	98 2f       	mov	r25, r24
    103a:	98 7f       	andi	r25, 0xF8	; 248
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	87 70       	andi	r24, 0x07	; 7
    1040:	89 2b       	or	r24, r25
    1042:	8c 93       	st	X, r24

	/* Enable */
	SET_BIT(WDTCR, 3);
    1044:	a1 e4       	ldi	r26, 0x41	; 65
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e1 e4       	ldi	r30, 0x41	; 65
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 60       	ori	r24, 0x08	; 8
    1050:	8c 93       	st	X, r24

}
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <MWDT_vDisable>:
void MWDT_vDisable(void)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	WDTCR = 0b00011000;
    1062:	e1 e4       	ldi	r30, 0x41	; 65
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	88 e1       	ldi	r24, 0x18	; 24
    1068:	80 83       	st	Z, r24
	WDTCR = 0;
    106a:	e1 e4       	ldi	r30, 0x41	; 65
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	10 82       	st	Z, r1
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <MUSART_vInit>:
#include "USART_int.h"
#include "USART_prv.h"


void MUSART_vInit(void)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
	// enable receiver & transmitter
	UCSRB = 0b00011000;
    107e:	ea e2       	ldi	r30, 0x2A	; 42
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	88 e1       	ldi	r24, 0x18	; 24
    1084:	80 83       	st	Z, r24
	// enable UCSRC reg | asynch | no parity | 1 stop bit | 8 bit data | no clk polarity
	UCSRC = 0b10000110;
    1086:	e0 e4       	ldi	r30, 0x40	; 64
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	86 e8       	ldi	r24, 0x86	; 134
    108c:	80 83       	st	Z, r24
	UBRRL = 51;
    108e:	e9 e2       	ldi	r30, 0x29	; 41
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	83 e3       	ldi	r24, 0x33	; 51
    1094:	80 83       	st	Z, r24
	UBRRH = 0;
    1096:	e0 e4       	ldi	r30, 0x40	; 64
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	10 82       	st	Z, r1


}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <MUSART_vTransmit>:
void MUSART_vTransmit(u8 A_u8Byte)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while(!GET_BIT(UCSRA, UDRE));
    10ae:	eb e2       	ldi	r30, 0x2B	; 43
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	82 95       	swap	r24
    10b6:	86 95       	lsr	r24
    10b8:	87 70       	andi	r24, 0x07	; 7
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	a1 f3       	breq	.-24     	; 0x10ae <MUSART_vTransmit+0xc>
//	while ( !( UCSRA & (1<<UDRE)) )
//	;
	/* Put data into buffer, sends the data */
	UDR = A_u8Byte;
    10c6:	ec e2       	ldi	r30, 0x2C	; 44
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	80 83       	st	Z, r24
}
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <MUSART_vReceive>:

u8 MUSART_vReceive(void)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while(!GET_BIT(UCSRA, RXC));
    10de:	eb e2       	ldi	r30, 0x2B	; 43
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	88 23       	and	r24, r24
    10e6:	dc f7       	brge	.-10     	; 0x10de <MUSART_vReceive+0x8>
//	while ( !(UCSRA & (1<<RXC)) )
//	;
	/* Get and return received data from buffer */
	return UDR;
    10e8:	ec e2       	ldi	r30, 0x2C	; 44
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <MTIMERS_vInit>:
static void(*G_TIMER1_ICU_CB)(void) = NULL;

static u32 G_u32T_required=0;

void MTIMERS_vInit(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
#elif TIMERID_0_MODE == CTC
	SET_BIT(TCCR0, WGM01);
	CLR_BIT(TCCR0, WGM00);

#elif TIMERID_0_MODE == FAST_PWM
	SET_BIT(TCCR0, WGM01);
    10fc:	a3 e5       	ldi	r26, 0x53	; 83
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e3 e5       	ldi	r30, 0x53	; 83
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM00);
    110a:	a3 e5       	ldi	r26, 0x53	; 83
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e3 e5       	ldi	r30, 0x53	; 83
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	88 60       	ori	r24, 0x08	; 8
    1116:	8c 93       	st	X, r24
#error "Incorrect mode"

#endif

#if INTERRUPR_CONTROL == ENABLE
	MTIMERS_vEnableInterrupt(TIM_0, TIMERID_0_MODE);
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	63 e0       	ldi	r22, 0x03	; 3
    111c:	0e 94 b9 09 	call	0x1372	; 0x1372 <MTIMERS_vEnableInterrupt>
#else
#error "Incorrect value"
#endif

	// Stop bit
	CLR_BIT(TCCR0,CS02);
    1120:	a3 e5       	ldi	r26, 0x53	; 83
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e3 e5       	ldi	r30, 0x53	; 83
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8b 7f       	andi	r24, 0xFB	; 251
    112c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
    112e:	a3 e5       	ldi	r26, 0x53	; 83
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e3 e5       	ldi	r30, 0x53	; 83
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8d 7f       	andi	r24, 0xFD	; 253
    113a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS00);
    113c:	a3 e5       	ldi	r26, 0x53	; 83
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e3 e5       	ldi	r30, 0x53	; 83
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8e 7f       	andi	r24, 0xFE	; 254
    1148:	8c 93       	st	X, r24
	//	SET_BIT(TCCR1B, 1);
	//	CLR_BIT(TCCR1B, 2);
	//	// value ICR1
	//	ICR1 = 2499;

	TCCR1A = 0b00000000;
    114a:	ef e4       	ldi	r30, 0x4F	; 79
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	10 82       	st	Z, r1
	TCCR1B = 0b01000010;
    1150:	ee e4       	ldi	r30, 0x4E	; 78
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	82 e4       	ldi	r24, 0x42	; 66
    1156:	80 83       	st	Z, r24
#endif

#if TIMERID_2 == ENABLE

#endif
}
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <MTIMERS_vSetIntervalAsych_CB>:
void MTIMERS_vSetIntervalAsych_CB(void (*Fptr)(void), u32 A_u32T_required)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <MTIMERS_vSetIntervalAsych_CB+0x6>
    1164:	00 d0       	rcall	.+0      	; 0x1166 <MTIMERS_vSetIntervalAsych_CB+0x8>
    1166:	00 d0       	rcall	.+0      	; 0x1168 <MTIMERS_vSetIntervalAsych_CB+0xa>
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	4b 83       	std	Y+3, r20	; 0x03
    1172:	5c 83       	std	Y+4, r21	; 0x04
    1174:	6d 83       	std	Y+5, r22	; 0x05
    1176:	7e 83       	std	Y+6, r23	; 0x06
	G_u32T_required = A_u32T_required;
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	ad 81       	ldd	r26, Y+5	; 0x05
    117e:	be 81       	ldd	r27, Y+6	; 0x06
    1180:	80 93 79 00 	sts	0x0079, r24
    1184:	90 93 7a 00 	sts	0x007A, r25
    1188:	a0 93 7b 00 	sts	0x007B, r26
    118c:	b0 93 7c 00 	sts	0x007C, r27
	G_TIMER_OVF_CB = Fptr;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	90 93 74 00 	sts	0x0074, r25
    1198:	80 93 73 00 	sts	0x0073, r24
//	MTIMERS_vStartTimer();
}
    119c:	26 96       	adiw	r28, 0x06	; 6
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <MTIMERS_vSetInterval_CTC>:
void MTIMERS_vSetInterval_CTC(void (*Fptr)(void),u32 A_u32T_required, u8 A_u8OCR_val)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	27 97       	sbiw	r28, 0x07	; 7
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	9a 83       	std	Y+2, r25	; 0x02
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	4b 83       	std	Y+3, r20	; 0x03
    11c8:	5c 83       	std	Y+4, r21	; 0x04
    11ca:	6d 83       	std	Y+5, r22	; 0x05
    11cc:	7e 83       	std	Y+6, r23	; 0x06
    11ce:	2f 83       	std	Y+7, r18	; 0x07
	G_TIMER_CTC_CB = Fptr;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	90 93 76 00 	sts	0x0076, r25
    11d8:	80 93 75 00 	sts	0x0075, r24
	G_u32T_required = A_u32T_required;
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	ad 81       	ldd	r26, Y+5	; 0x05
    11e2:	be 81       	ldd	r27, Y+6	; 0x06
    11e4:	80 93 79 00 	sts	0x0079, r24
    11e8:	90 93 7a 00 	sts	0x007A, r25
    11ec:	a0 93 7b 00 	sts	0x007B, r26
    11f0:	b0 93 7c 00 	sts	0x007C, r27
	OCR0 = A_u8OCR_val;
    11f4:	ec e5       	ldi	r30, 0x5C	; 92
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8f 81       	ldd	r24, Y+7	; 0x07
    11fa:	80 83       	st	Z, r24
//	MTIMERS_vStartTimer();
}
    11fc:	27 96       	adiw	r28, 0x07	; 7
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <MTIMERS_vStartTimer>:
void MTIMERS_vStartTimer(u8 A_u8TimerID)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	0f 92       	push	r0
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8TimerID == TIM_0)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	88 23       	and	r24, r24
    121e:	41 f4       	brne	.+16     	; 0x1230 <MTIMERS_vStartTimer+0x22>
	{
		TCCR0 = (TCCR0 & 0xF8) | (0x07 & CLK_SELECT_PRESCALER_TIM0);
    1220:	a3 e5       	ldi	r26, 0x53	; 83
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e3 e5       	ldi	r30, 0x53	; 83
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	88 7f       	andi	r24, 0xF8	; 248
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	8c 93       	st	X, r24
	}
	if(A_u8TimerID == TIM_1)
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	41 f4       	brne	.+16     	; 0x1246 <MTIMERS_vStartTimer+0x38>
	{
		TCCR1B = (TCCR1B & 0xF8) | (0x07 & CLK_SELECT_PRESCALER_TIM1);
    1236:	ae e4       	ldi	r26, 0x4E	; 78
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ee e4       	ldi	r30, 0x4E	; 78
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	88 7f       	andi	r24, 0xF8	; 248
    1242:	82 60       	ori	r24, 0x02	; 2
    1244:	8c 93       	st	X, r24
	}



}
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <MTIMERS_vStopTimer>:
void MTIMERS_vStopTimer(u8 A_u8TimerID)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8TimerID == TIM_0)
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	88 23       	and	r24, r24
    125e:	39 f4       	brne	.+14     	; 0x126e <MTIMERS_vStopTimer+0x20>
	{
		TCCR0 = (TCCR0 & 0xF8) | (0x07 & 0x00);
    1260:	a3 e5       	ldi	r26, 0x53	; 83
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e3 e5       	ldi	r30, 0x53	; 83
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	88 7f       	andi	r24, 0xF8	; 248
    126c:	8c 93       	st	X, r24
	}
	if(A_u8TimerID == TIM_1)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	82 30       	cpi	r24, 0x02	; 2
    1272:	39 f4       	brne	.+14     	; 0x1282 <MTIMERS_vStopTimer+0x34>
	{
		TCCR1B = (TCCR1B & 0xF8) | (0x07 & 0x00);
    1274:	ae e4       	ldi	r26, 0x4E	; 78
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ee e4       	ldi	r30, 0x4E	; 78
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	88 7f       	andi	r24, 0xF8	; 248
    1280:	8c 93       	st	X, r24
	}

}
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <MTIMERS_vSetCompareMatch>:

void MTIMERS_vSetCompareMatch(u8 A_u8TimerID, u16 A_16OCR_val)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	00 d0       	rcall	.+0      	; 0x1290 <MTIMERS_vSetCompareMatch+0x6>
    1290:	00 d0       	rcall	.+0      	; 0x1292 <MTIMERS_vSetCompareMatch+0x8>
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	7b 83       	std	Y+3, r23	; 0x03
    129c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerID)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 83       	std	Y+5, r19	; 0x05
    12a6:	2c 83       	std	Y+4, r18	; 0x04
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	31 f0       	breq	.+12     	; 0x12bc <MTIMERS_vSetCompareMatch+0x32>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	21 30       	cpi	r18, 0x01	; 1
    12b6:	31 05       	cpc	r19, r1
    12b8:	31 f0       	breq	.+12     	; 0x12c6 <MTIMERS_vSetCompareMatch+0x3c>
    12ba:	0b c0       	rjmp	.+22     	; 0x12d2 <MTIMERS_vSetCompareMatch+0x48>
	{
	case TIM_0:
		OCR0 = A_16OCR_val;
    12bc:	ec e5       	ldi	r30, 0x5C	; 92
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	80 83       	st	Z, r24
    12c4:	06 c0       	rjmp	.+12     	; 0x12d2 <MTIMERS_vSetCompareMatch+0x48>
		break;
	case TIM_1_A:
		OCR1A = A_16OCR_val;
    12c6:	ea e4       	ldi	r30, 0x4A	; 74
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	91 83       	std	Z+1, r25	; 0x01
    12d0:	80 83       	st	Z, r24
		break;
	}

}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <MTIMERS_vSetICU_CB>:

void MTIMERS_vSetICU_CB(void (*Fptr)(void))
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <MTIMERS_vSetICU_CB+0x6>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	89 83       	std	Y+1, r24	; 0x01
	G_TIMER1_ICU_CB = Fptr;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	90 93 78 00 	sts	0x0078, r25
    12f8:	80 93 77 00 	sts	0x0077, r24
}
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <MTIMERS_u16GetCapturedValue>:

u16 MTIMERS_u16GetCapturedValue(void)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    130e:	e6 e4       	ldi	r30, 0x46	; 70
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	91 81       	ldd	r25, Z+1	; 0x01
}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <MTIMERS_SetTrigger>:
void MTIMERS_SetTrigger(u8 A_Trigger_Type)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <MTIMERS_SetTrigger+0x6>
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	89 83       	std	Y+1, r24	; 0x01
	switch (A_Trigger_Type)
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	3b 83       	std	Y+3, r19	; 0x03
    1332:	2a 83       	std	Y+2, r18	; 0x02
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	9b 81       	ldd	r25, Y+3	; 0x03
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	31 f0       	breq	.+12     	; 0x1348 <MTIMERS_SetTrigger+0x2c>
    133c:	2a 81       	ldd	r18, Y+2	; 0x02
    133e:	3b 81       	ldd	r19, Y+3	; 0x03
    1340:	21 30       	cpi	r18, 0x01	; 1
    1342:	31 05       	cpc	r19, r1
    1344:	49 f0       	breq	.+18     	; 0x1358 <MTIMERS_SetTrigger+0x3c>
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <MTIMERS_SetTrigger+0x4a>
	{
	case TRIG_TYPE_RISING:
		SET_BIT(TCCR1B, 6);
    1348:	ae e4       	ldi	r26, 0x4E	; 78
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ee e4       	ldi	r30, 0x4E	; 78
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 64       	ori	r24, 0x40	; 64
    1354:	8c 93       	st	X, r24
    1356:	07 c0       	rjmp	.+14     	; 0x1366 <MTIMERS_SetTrigger+0x4a>
		break;
	case TRIG_TYPE_FALLING:
		CLR_BIT(TCCR1B, 6);
    1358:	ae e4       	ldi	r26, 0x4E	; 78
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ee e4       	ldi	r30, 0x4E	; 78
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8f 7b       	andi	r24, 0xBF	; 191
    1364:	8c 93       	st	X, r24
		break;
	}
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <MTIMERS_vEnableInterrupt>:
void MTIMERS_vEnableInterrupt(u8 A_u8TimerID, u8 A_u8TimerMode)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <MTIMERS_vEnableInterrupt+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <MTIMERS_vEnableInterrupt+0x8>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8TimerID == TIM_0)
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	88 23       	and	r24, r24
    1386:	f1 f4       	brne	.+60     	; 0x13c4 <MTIMERS_vEnableInterrupt+0x52>
	{
		switch(A_u8TimerMode)
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3c 83       	std	Y+4, r19	; 0x04
    1390:	2b 83       	std	Y+3, r18	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	31 f0       	breq	.+12     	; 0x13a6 <MTIMERS_vEnableInterrupt+0x34>
    139a:	2b 81       	ldd	r18, Y+3	; 0x03
    139c:	3c 81       	ldd	r19, Y+4	; 0x04
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	49 f0       	breq	.+18     	; 0x13b6 <MTIMERS_vEnableInterrupt+0x44>
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <MTIMERS_vEnableInterrupt+0x52>
		{
		case NORMAL_OVERFLOW:
			SET_BIT(TIMSK, 0);
    13a6:	a9 e5       	ldi	r26, 0x59	; 89
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e9 e5       	ldi	r30, 0x59	; 89
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	8c 93       	st	X, r24
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <MTIMERS_vEnableInterrupt+0x52>
			break;
		case CTC:
			SET_BIT(TIMSK, 1);
    13b6:	a9 e5       	ldi	r26, 0x59	; 89
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e9 e5       	ldi	r30, 0x59	; 89
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	82 60       	ori	r24, 0x02	; 2
    13c2:	8c 93       	st	X, r24
			break;
		}
	}
	if(A_u8TimerID == TIM_1)
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	61 f4       	brne	.+24     	; 0x13e2 <MTIMERS_vEnableInterrupt+0x70>
	{
		switch(A_u8TimerMode)
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	39 f4       	brne	.+14     	; 0x13e2 <MTIMERS_vEnableInterrupt+0x70>
		{
		case ICU_MODE:
			SET_BIT(TIMSK, 5);
    13d4:	a9 e5       	ldi	r26, 0x59	; 89
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e9 e5       	ldi	r30, 0x59	; 89
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 62       	ori	r24, 0x20	; 32
    13e0:	8c 93       	st	X, r24
			break;
		}
	}
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <MTIMERS_vDisableInterrupt>:
void MTIMERS_vDisableInterrupt(u8 A_u8TimerID, u8 A_u8TimerMode)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <MTIMERS_vDisableInterrupt+0x6>
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <MTIMERS_vDisableInterrupt+0x8>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8TimerID == TIM_0)
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	88 23       	and	r24, r24
    1404:	f1 f4       	brne	.+60     	; 0x1442 <MTIMERS_vDisableInterrupt+0x52>
	{
		switch(A_u8TimerMode)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3c 83       	std	Y+4, r19	; 0x04
    140e:	2b 83       	std	Y+3, r18	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	31 f0       	breq	.+12     	; 0x1424 <MTIMERS_vDisableInterrupt+0x34>
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	3c 81       	ldd	r19, Y+4	; 0x04
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	49 f0       	breq	.+18     	; 0x1434 <MTIMERS_vDisableInterrupt+0x44>
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <MTIMERS_vDisableInterrupt+0x52>
		{
		case NORMAL_OVERFLOW:
			CLR_BIT(TIMSK, 0);
    1424:	a9 e5       	ldi	r26, 0x59	; 89
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e9 e5       	ldi	r30, 0x59	; 89
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8e 7f       	andi	r24, 0xFE	; 254
    1430:	8c 93       	st	X, r24
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <MTIMERS_vDisableInterrupt+0x52>
			break;
		case CTC:
			CLR_BIT(TIMSK, 1);
    1434:	a9 e5       	ldi	r26, 0x59	; 89
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e9 e5       	ldi	r30, 0x59	; 89
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8d 7f       	andi	r24, 0xFD	; 253
    1440:	8c 93       	st	X, r24
			break;
		}
	}
	if(A_u8TimerID == TIM_1)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	61 f4       	brne	.+24     	; 0x1460 <MTIMERS_vDisableInterrupt+0x70>
	{
		switch(A_u8TimerMode)
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	39 f4       	brne	.+14     	; 0x1460 <MTIMERS_vDisableInterrupt+0x70>
		{
		case ICU_MODE:
			CLR_BIT(TIMSK, 5);
    1452:	a9 e5       	ldi	r26, 0x59	; 89
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e9 e5       	ldi	r30, 0x59	; 89
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8f 7d       	andi	r24, 0xDF	; 223
    145e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <__vector_11>:



void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32T_OVF = 0;
	LS_u32T_OVF++;
    1498:	80 91 7d 00 	lds	r24, 0x007D
    149c:	90 91 7e 00 	lds	r25, 0x007E
    14a0:	a0 91 7f 00 	lds	r26, 0x007F
    14a4:	b0 91 80 00 	lds	r27, 0x0080
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	a1 1d       	adc	r26, r1
    14ac:	b1 1d       	adc	r27, r1
    14ae:	80 93 7d 00 	sts	0x007D, r24
    14b2:	90 93 7e 00 	sts	0x007E, r25
    14b6:	a0 93 7f 00 	sts	0x007F, r26
    14ba:	b0 93 80 00 	sts	0x0080, r27
	if(LS_u32T_OVF == G_u32T_required)
    14be:	20 91 7d 00 	lds	r18, 0x007D
    14c2:	30 91 7e 00 	lds	r19, 0x007E
    14c6:	40 91 7f 00 	lds	r20, 0x007F
    14ca:	50 91 80 00 	lds	r21, 0x0080
    14ce:	80 91 79 00 	lds	r24, 0x0079
    14d2:	90 91 7a 00 	lds	r25, 0x007A
    14d6:	a0 91 7b 00 	lds	r26, 0x007B
    14da:	b0 91 7c 00 	lds	r27, 0x007C
    14de:	28 17       	cp	r18, r24
    14e0:	39 07       	cpc	r19, r25
    14e2:	4a 07       	cpc	r20, r26
    14e4:	5b 07       	cpc	r21, r27
    14e6:	99 f4       	brne	.+38     	; 0x150e <__vector_11+0xa0>
	{
		if(G_TIMER_OVF_CB != NULL)
    14e8:	80 91 73 00 	lds	r24, 0x0073
    14ec:	90 91 74 00 	lds	r25, 0x0074
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	69 f0       	breq	.+26     	; 0x150e <__vector_11+0xa0>
		{
			G_TIMER_OVF_CB();
    14f4:	e0 91 73 00 	lds	r30, 0x0073
    14f8:	f0 91 74 00 	lds	r31, 0x0074
    14fc:	09 95       	icall
			LS_u32T_OVF = 0;
    14fe:	10 92 7d 00 	sts	0x007D, r1
    1502:	10 92 7e 00 	sts	0x007E, r1
    1506:	10 92 7f 00 	sts	0x007F, r1
    150a:	10 92 80 00 	sts	0x0080, r1
		}
	}

}
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	ff 91       	pop	r31
    1514:	ef 91       	pop	r30
    1516:	bf 91       	pop	r27
    1518:	af 91       	pop	r26
    151a:	9f 91       	pop	r25
    151c:	8f 91       	pop	r24
    151e:	7f 91       	pop	r23
    1520:	6f 91       	pop	r22
    1522:	5f 91       	pop	r21
    1524:	4f 91       	pop	r20
    1526:	3f 91       	pop	r19
    1528:	2f 91       	pop	r18
    152a:	0f 90       	pop	r0
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	0f 90       	pop	r0
    1530:	1f 90       	pop	r1
    1532:	18 95       	reti

00001534 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
    153e:	2f 93       	push	r18
    1540:	3f 93       	push	r19
    1542:	4f 93       	push	r20
    1544:	5f 93       	push	r21
    1546:	6f 93       	push	r22
    1548:	7f 93       	push	r23
    154a:	8f 93       	push	r24
    154c:	9f 93       	push	r25
    154e:	af 93       	push	r26
    1550:	bf 93       	push	r27
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;
	LS_u32Counter++;
    155e:	80 91 81 00 	lds	r24, 0x0081
    1562:	90 91 82 00 	lds	r25, 0x0082
    1566:	a0 91 83 00 	lds	r26, 0x0083
    156a:	b0 91 84 00 	lds	r27, 0x0084
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	a1 1d       	adc	r26, r1
    1572:	b1 1d       	adc	r27, r1
    1574:	80 93 81 00 	sts	0x0081, r24
    1578:	90 93 82 00 	sts	0x0082, r25
    157c:	a0 93 83 00 	sts	0x0083, r26
    1580:	b0 93 84 00 	sts	0x0084, r27
	if(LS_u32Counter == G_u32T_required)
    1584:	20 91 81 00 	lds	r18, 0x0081
    1588:	30 91 82 00 	lds	r19, 0x0082
    158c:	40 91 83 00 	lds	r20, 0x0083
    1590:	50 91 84 00 	lds	r21, 0x0084
    1594:	80 91 79 00 	lds	r24, 0x0079
    1598:	90 91 7a 00 	lds	r25, 0x007A
    159c:	a0 91 7b 00 	lds	r26, 0x007B
    15a0:	b0 91 7c 00 	lds	r27, 0x007C
    15a4:	28 17       	cp	r18, r24
    15a6:	39 07       	cpc	r19, r25
    15a8:	4a 07       	cpc	r20, r26
    15aa:	5b 07       	cpc	r21, r27
    15ac:	99 f4       	brne	.+38     	; 0x15d4 <__vector_10+0xa0>
	{
		if(G_TIMER_CTC_CB != NULL)
    15ae:	80 91 75 00 	lds	r24, 0x0075
    15b2:	90 91 76 00 	lds	r25, 0x0076
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	69 f0       	breq	.+26     	; 0x15d4 <__vector_10+0xa0>
		{
			G_TIMER_CTC_CB();
    15ba:	e0 91 75 00 	lds	r30, 0x0075
    15be:	f0 91 76 00 	lds	r31, 0x0076
    15c2:	09 95       	icall
			LS_u32Counter = 0;
    15c4:	10 92 81 00 	sts	0x0081, r1
    15c8:	10 92 82 00 	sts	0x0082, r1
    15cc:	10 92 83 00 	sts	0x0083, r1
    15d0:	10 92 84 00 	sts	0x0084, r1
		}
	}
}
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	ff 91       	pop	r31
    15da:	ef 91       	pop	r30
    15dc:	bf 91       	pop	r27
    15de:	af 91       	pop	r26
    15e0:	9f 91       	pop	r25
    15e2:	8f 91       	pop	r24
    15e4:	7f 91       	pop	r23
    15e6:	6f 91       	pop	r22
    15e8:	5f 91       	pop	r21
    15ea:	4f 91       	pop	r20
    15ec:	3f 91       	pop	r19
    15ee:	2f 91       	pop	r18
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	1f 90       	pop	r1
    15f8:	18 95       	reti

000015fa <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	2f 93       	push	r18
    1606:	3f 93       	push	r19
    1608:	4f 93       	push	r20
    160a:	5f 93       	push	r21
    160c:	6f 93       	push	r22
    160e:	7f 93       	push	r23
    1610:	8f 93       	push	r24
    1612:	9f 93       	push	r25
    1614:	af 93       	push	r26
    1616:	bf 93       	push	r27
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
	if(	G_TIMER1_ICU_CB != NULL)
    1624:	80 91 77 00 	lds	r24, 0x0077
    1628:	90 91 78 00 	lds	r25, 0x0078
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	29 f0       	breq	.+10     	; 0x163a <__vector_6+0x40>
	{
		G_TIMER1_ICU_CB();
    1630:	e0 91 77 00 	lds	r30, 0x0077
    1634:	f0 91 78 00 	lds	r31, 0x0078
    1638:	09 95       	icall
	}
}
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	bf 91       	pop	r27
    1644:	af 91       	pop	r26
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	7f 91       	pop	r23
    164c:	6f 91       	pop	r22
    164e:	5f 91       	pop	r21
    1650:	4f 91       	pop	r20
    1652:	3f 91       	pop	r19
    1654:	2f 91       	pop	r18
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	0f 90       	pop	r0
    165c:	1f 90       	pop	r1
    165e:	18 95       	reti

00001660 <MSPI_vInit>:
#include "SPI_int.h"
#include "SPI_prv.h"
#include "SPI_cfg.h"

void MSPI_vInit(void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(DIO_PORTB, DIO_PIN6, DIO_INPUT);          // MISO
	MDIO_vSetPinVal(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);			// pullup resistor

#endif
#if SPI_MODE == SPI_SLAVE
	MDIO_vSetPinDir(DIO_PORTB, DIO_PIN5, DIO_INPUT);          // MOSI
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	65 e0       	ldi	r22, 0x05	; 5
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTB, DIO_PIN7, DIO_INPUT);          // sck
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	67 e0       	ldi	r22, 0x07	; 7
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);          // MISO
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	66 e0       	ldi	r22, 0x06	; 6
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
#endif


	// SPI enable | Master | pre_64
	SPCR = 0b01011010;
    1686:	ed e2       	ldi	r30, 0x2D	; 45
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8a e5       	ldi	r24, 0x5A	; 90
    168c:	80 83       	st	Z, r24
}
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <MSPI_vTransceive>:
u8 MSPI_vTransceive(u8 A_u8Byte)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	0f 92       	push	r0
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = A_u8Byte;
    16a0:	ef e2       	ldi	r30, 0x2F	; 47
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(!GET_BIT(SPSR, SPIF))
    16a8:	ee e2       	ldi	r30, 0x2E	; 46
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	88 23       	and	r24, r24
    16b0:	dc f7       	brge	.-10     	; 0x16a8 <MSPI_vTransceive+0x14>
		;

	/* Return data register */
	return SPDR;
    16b2:	ef e2       	ldi	r30, 0x2F	; 47
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z

}
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <MSPI_vTransmit>:

void MSPI_vTransmit(u8 A_u8Byte)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	0f 92       	push	r0
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = A_u8Byte;
    16cc:	ef e2       	ldi	r30, 0x2F	; 47
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
    16d4:	ee e2       	ldi	r30, 0x2E	; 46
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	88 23       	and	r24, r24
    16dc:	dc f7       	brge	.-10     	; 0x16d4 <MSPI_vTransmit+0x14>
		;
}
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <MSPI_u8Receive>:
u8 MSPI_u8Receive(void)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(!GET_BIT(SPSR, SPIF))
    16ee:	ee e2       	ldi	r30, 0x2E	; 46
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	88 23       	and	r24, r24
    16f6:	dc f7       	brge	.-10     	; 0x16ee <MSPI_u8Receive+0x8>
		;
	/* Return data register */
	return SPDR;
    16f8:	ef e2       	ldi	r30, 0x2F	; 47
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
}
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <MGIE_vEnableGlobalInterrupt>:
#include "GIE_int.h"
#include "GIE_prv.h"


void MGIE_vEnableGlobalInterrupt(void)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    170c:	af e5       	ldi	r26, 0x5F	; 95
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ef e5       	ldi	r30, 0x5F	; 95
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	80 68       	ori	r24, 0x80	; 128
    1718:	8c 93       	st	X, r24
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <MGIE_vDisableGlobalInterrupt>:
void MGIE_vDisableGlobalInterrupt(void)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1728:	af e5       	ldi	r26, 0x5F	; 95
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ef e5       	ldi	r30, 0x5F	; 95
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8f 77       	andi	r24, 0x7F	; 127
    1734:	8c 93       	st	X, r24
}
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <MEXTI_vInit>:

// array of function pointers
static void (*G_EXTI_Callback[3])(void) = {NULL};

void MEXTI_vInit(void)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
	// falling edge for INT0
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif EXTI_INT0_SENSE_CTRL == EXTI_RISING
	// rising edge for INT0
	SET_BIT(MCUCR,0);
    1744:	a5 e5       	ldi	r26, 0x55	; 85
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e5 e5       	ldi	r30, 0x55	; 85
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	81 60       	ori	r24, 0x01	; 1
    1750:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    1752:	a5 e5       	ldi	r26, 0x55	; 85
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e5       	ldi	r30, 0x55	; 85
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	82 60       	ori	r24, 0x02	; 2
    175e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
#else
#error "Sense control must be EXTI_FALLING , EXTI_RISING , EXTI_LOW_LVL or EXTI_ONCHANGE "
#endif
	/* Enable interrupt */
	SET_BIT(GICR,6);
    1760:	ab e5       	ldi	r26, 0x5B	; 91
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	eb e5       	ldi	r30, 0x5B	; 91
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	80 64       	ori	r24, 0x40	; 64
    176c:	8c 93       	st	X, r24
#endif
	/* Enable interrupt */
	SET_BIT(GICR,5);
#endif

}
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <MEXTI_vCallBackFunction>:

void MEXTI_vCallBackFunction(void (*Fptr)(void), u8 A_u8InterruptNo)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <MEXTI_vCallBackFunction+0x6>
    177a:	0f 92       	push	r0
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	6b 83       	std	Y+3, r22	; 0x03
	G_EXTI_Callback[A_u8InterruptNo] = Fptr;
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	fc 01       	movw	r30, r24
    1792:	eb 57       	subi	r30, 0x7B	; 123
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    17aa:	1f 92       	push	r1
    17ac:	0f 92       	push	r0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	11 24       	eor	r1, r1
    17b4:	2f 93       	push	r18
    17b6:	3f 93       	push	r19
    17b8:	4f 93       	push	r20
    17ba:	5f 93       	push	r21
    17bc:	6f 93       	push	r22
    17be:	7f 93       	push	r23
    17c0:	8f 93       	push	r24
    17c2:	9f 93       	push	r25
    17c4:	af 93       	push	r26
    17c6:	bf 93       	push	r27
    17c8:	ef 93       	push	r30
    17ca:	ff 93       	push	r31
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	// call a specific function
	if(G_EXTI_Callback[0] != NULL)
    17d4:	80 91 85 00 	lds	r24, 0x0085
    17d8:	90 91 86 00 	lds	r25, 0x0086
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	29 f0       	breq	.+10     	; 0x17ea <__vector_1+0x40>
	{
		G_EXTI_Callback[0]();
    17e0:	e0 91 85 00 	lds	r30, 0x0085
    17e4:	f0 91 86 00 	lds	r31, 0x0086
    17e8:	09 95       	icall
	}
}
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	ff 91       	pop	r31
    17f0:	ef 91       	pop	r30
    17f2:	bf 91       	pop	r27
    17f4:	af 91       	pop	r26
    17f6:	9f 91       	pop	r25
    17f8:	8f 91       	pop	r24
    17fa:	7f 91       	pop	r23
    17fc:	6f 91       	pop	r22
    17fe:	5f 91       	pop	r21
    1800:	4f 91       	pop	r20
    1802:	3f 91       	pop	r19
    1804:	2f 91       	pop	r18
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	2f 93       	push	r18
    181c:	3f 93       	push	r19
    181e:	4f 93       	push	r20
    1820:	5f 93       	push	r21
    1822:	6f 93       	push	r22
    1824:	7f 93       	push	r23
    1826:	8f 93       	push	r24
    1828:	9f 93       	push	r25
    182a:	af 93       	push	r26
    182c:	bf 93       	push	r27
    182e:	ef 93       	push	r30
    1830:	ff 93       	push	r31
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
	// call a specific function
	if(G_EXTI_Callback[1] != NULL)
    183a:	80 91 87 00 	lds	r24, 0x0087
    183e:	90 91 88 00 	lds	r25, 0x0088
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	29 f0       	breq	.+10     	; 0x1850 <__vector_2+0x40>
	{
		G_EXTI_Callback[1]();
    1846:	e0 91 87 00 	lds	r30, 0x0087
    184a:	f0 91 88 00 	lds	r31, 0x0088
    184e:	09 95       	icall
	}
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	bf 91       	pop	r27
    185a:	af 91       	pop	r26
    185c:	9f 91       	pop	r25
    185e:	8f 91       	pop	r24
    1860:	7f 91       	pop	r23
    1862:	6f 91       	pop	r22
    1864:	5f 91       	pop	r21
    1866:	4f 91       	pop	r20
    1868:	3f 91       	pop	r19
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	2f 93       	push	r18
    1882:	3f 93       	push	r19
    1884:	4f 93       	push	r20
    1886:	5f 93       	push	r21
    1888:	6f 93       	push	r22
    188a:	7f 93       	push	r23
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
	// call a specific function
	if(G_EXTI_Callback[2] != NULL)
    18a0:	80 91 89 00 	lds	r24, 0x0089
    18a4:	90 91 8a 00 	lds	r25, 0x008A
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <__vector_3+0x40>
	{
		G_EXTI_Callback[2]();
    18ac:	e0 91 89 00 	lds	r30, 0x0089
    18b0:	f0 91 8a 00 	lds	r31, 0x008A
    18b4:	09 95       	icall
	}
}
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	ff 91       	pop	r31
    18bc:	ef 91       	pop	r30
    18be:	bf 91       	pop	r27
    18c0:	af 91       	pop	r26
    18c2:	9f 91       	pop	r25
    18c4:	8f 91       	pop	r24
    18c6:	7f 91       	pop	r23
    18c8:	6f 91       	pop	r22
    18ca:	5f 91       	pop	r21
    18cc:	4f 91       	pop	r20
    18ce:	3f 91       	pop	r19
    18d0:	2f 91       	pop	r18
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	0f 90       	pop	r0
    18d8:	1f 90       	pop	r1
    18da:	18 95       	reti

000018dc <MDIO_vInit>:

#include "DIO_int.h"
#include "DIO_prv.h"

void MDIO_vInit(void)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	DDRA  = 0;
    18e4:	ea e3       	ldi	r30, 0x3A	; 58
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	10 82       	st	Z, r1
	DDRB  = 0;
    18ea:	e7 e3       	ldi	r30, 0x37	; 55
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	10 82       	st	Z, r1
	DDRC  = 0;
    18f0:	e4 e3       	ldi	r30, 0x34	; 52
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	10 82       	st	Z, r1
	DDRD  = 0;
    18f6:	e1 e3       	ldi	r30, 0x31	; 49
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	10 82       	st	Z, r1

	PORTA = 0;
    18fc:	eb e3       	ldi	r30, 0x3B	; 59
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	10 82       	st	Z, r1
	PORTB = 0;
    1902:	e8 e3       	ldi	r30, 0x38	; 56
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	10 82       	st	Z, r1
	PORTC = 0;
    1908:	e5 e3       	ldi	r30, 0x35	; 53
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	10 82       	st	Z, r1
	PORTD = 0;
    190e:	e2 e3       	ldi	r30, 0x32	; 50
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	10 82       	st	Z, r1

}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <MDIO_vSetPinDir>:

void MDIO_vSetPinDir(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinDir)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	27 97       	sbiw	r28, 0x07	; 7
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	6a 83       	std	Y+2, r22	; 0x02
    1932:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PinDir == DIO_OUTPUT)
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	09 f0       	breq	.+2      	; 0x193c <MDIO_vSetPinDir+0x22>
    193a:	6f c0       	rjmp	.+222    	; 0x1a1a <MDIO_vSetPinDir+0x100>
	{
		switch(A_u8PortNo)
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3f 83       	std	Y+7, r19	; 0x07
    1944:	2e 83       	std	Y+6, r18	; 0x06
    1946:	8e 81       	ldd	r24, Y+6	; 0x06
    1948:	9f 81       	ldd	r25, Y+7	; 0x07
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	91 05       	cpc	r25, r1
    194e:	49 f1       	breq	.+82     	; 0x19a2 <MDIO_vSetPinDir+0x88>
    1950:	2e 81       	ldd	r18, Y+6	; 0x06
    1952:	3f 81       	ldd	r19, Y+7	; 0x07
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	2c f4       	brge	.+10     	; 0x1964 <MDIO_vSetPinDir+0x4a>
    195a:	8e 81       	ldd	r24, Y+6	; 0x06
    195c:	9f 81       	ldd	r25, Y+7	; 0x07
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	61 f0       	breq	.+24     	; 0x197a <MDIO_vSetPinDir+0x60>
    1962:	d2 c0       	rjmp	.+420    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
    1964:	2e 81       	ldd	r18, Y+6	; 0x06
    1966:	3f 81       	ldd	r19, Y+7	; 0x07
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	71 f1       	breq	.+92     	; 0x19ca <MDIO_vSetPinDir+0xb0>
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	e9 f1       	breq	.+122    	; 0x19f2 <MDIO_vSetPinDir+0xd8>
    1978:	c7 c0       	rjmp	.+398    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(DDRA,A_u8PinNo);
    197a:	aa e3       	ldi	r26, 0x3A	; 58
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ea e3       	ldi	r30, 0x3A	; 58
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <MDIO_vSetPinDir+0x7e>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <MDIO_vSetPinDir+0x7a>
    199c:	84 2b       	or	r24, r20
    199e:	8c 93       	st	X, r24
    19a0:	b3 c0       	rjmp	.+358    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(DDRB,A_u8PinNo);
    19a2:	a7 e3       	ldi	r26, 0x37	; 55
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e7 e3       	ldi	r30, 0x37	; 55
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <MDIO_vSetPinDir+0xa6>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <MDIO_vSetPinDir+0xa2>
    19c4:	84 2b       	or	r24, r20
    19c6:	8c 93       	st	X, r24
    19c8:	9f c0       	rjmp	.+318    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(DDRC,A_u8PinNo);
    19ca:	a4 e3       	ldi	r26, 0x34	; 52
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e4 e3       	ldi	r30, 0x34	; 52
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <MDIO_vSetPinDir+0xce>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <MDIO_vSetPinDir+0xca>
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	8b c0       	rjmp	.+278    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(DDRD,A_u8PinNo);
    19f2:	a1 e3       	ldi	r26, 0x31	; 49
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e1 e3       	ldi	r30, 0x31	; 49
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <MDIO_vSetPinDir+0xf6>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <MDIO_vSetPinDir+0xf2>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
    1a18:	77 c0       	rjmp	.+238    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
			break;
		}
	}else if(A_u8PinDir == DIO_INPUT)
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	88 23       	and	r24, r24
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <MDIO_vSetPinDir+0x108>
    1a20:	73 c0       	rjmp	.+230    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
	{
		switch(A_u8PortNo)
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	3d 83       	std	Y+5, r19	; 0x05
    1a2a:	2c 83       	std	Y+4, r18	; 0x04
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	91 05       	cpc	r25, r1
    1a34:	59 f1       	breq	.+86     	; 0x1a8c <MDIO_vSetPinDir+0x172>
    1a36:	2c 81       	ldd	r18, Y+4	; 0x04
    1a38:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3a:	22 30       	cpi	r18, 0x02	; 2
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <MDIO_vSetPinDir+0x130>
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	69 f0       	breq	.+26     	; 0x1a62 <MDIO_vSetPinDir+0x148>
    1a48:	5f c0       	rjmp	.+190    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
    1a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 05       	cpc	r19, r1
    1a52:	89 f1       	breq	.+98     	; 0x1ab6 <MDIO_vSetPinDir+0x19c>
    1a54:	8c 81       	ldd	r24, Y+4	; 0x04
    1a56:	9d 81       	ldd	r25, Y+5	; 0x05
    1a58:	83 30       	cpi	r24, 0x03	; 3
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <MDIO_vSetPinDir+0x146>
    1a5e:	40 c0       	rjmp	.+128    	; 0x1ae0 <MDIO_vSetPinDir+0x1c6>
    1a60:	53 c0       	rjmp	.+166    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(DDRA,A_u8PinNo);
    1a62:	aa e3       	ldi	r26, 0x3A	; 58
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	ea e3       	ldi	r30, 0x3A	; 58
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <MDIO_vSetPinDir+0x166>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <MDIO_vSetPinDir+0x162>
    1a84:	80 95       	com	r24
    1a86:	84 23       	and	r24, r20
    1a88:	8c 93       	st	X, r24
    1a8a:	3e c0       	rjmp	.+124    	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(DDRB,A_u8PinNo);
    1a8c:	a7 e3       	ldi	r26, 0x37	; 55
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e7 e3       	ldi	r30, 0x37	; 55
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <MDIO_vSetPinDir+0x190>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <MDIO_vSetPinDir+0x18c>
    1aae:	80 95       	com	r24
    1ab0:	84 23       	and	r24, r20
    1ab2:	8c 93       	st	X, r24
    1ab4:	29 c0       	rjmp	.+82     	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(DDRC,A_u8PinNo);
    1ab6:	a4 e3       	ldi	r26, 0x34	; 52
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e4 e3       	ldi	r30, 0x34	; 52
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <MDIO_vSetPinDir+0x1ba>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <MDIO_vSetPinDir+0x1b6>
    1ad8:	80 95       	com	r24
    1ada:	84 23       	and	r24, r20
    1adc:	8c 93       	st	X, r24
    1ade:	14 c0       	rjmp	.+40     	; 0x1b08 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(DDRD,A_u8PinNo);
    1ae0:	a1 e3       	ldi	r26, 0x31	; 49
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e1 e3       	ldi	r30, 0x31	; 49
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	48 2f       	mov	r20, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <MDIO_vSetPinDir+0x1e4>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <MDIO_vSetPinDir+0x1e0>
    1b02:	80 95       	com	r24
    1b04:	84 23       	and	r24, r20
    1b06:	8c 93       	st	X, r24
			break;
		}
	}
}
    1b08:	27 96       	adiw	r28, 0x07	; 7
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <MDIO_vSetPinVal>:

void MDIO_vSetPinVal(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinVal)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	27 97       	sbiw	r28, 0x07	; 7
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	6a 83       	std	Y+2, r22	; 0x02
    1b32:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PinVal == DIO_HIGH)
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <MDIO_vSetPinVal+0x22>
    1b3a:	6f c0       	rjmp	.+222    	; 0x1c1a <MDIO_vSetPinVal+0x100>
	{
		switch(A_u8PortNo)
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	3f 83       	std	Y+7, r19	; 0x07
    1b44:	2e 83       	std	Y+6, r18	; 0x06
    1b46:	8e 81       	ldd	r24, Y+6	; 0x06
    1b48:	9f 81       	ldd	r25, Y+7	; 0x07
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	49 f1       	breq	.+82     	; 0x1ba2 <MDIO_vSetPinVal+0x88>
    1b50:	2e 81       	ldd	r18, Y+6	; 0x06
    1b52:	3f 81       	ldd	r19, Y+7	; 0x07
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <MDIO_vSetPinVal+0x4a>
    1b5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <MDIO_vSetPinVal+0x60>
    1b62:	d2 c0       	rjmp	.+420    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
    1b64:	2e 81       	ldd	r18, Y+6	; 0x06
    1b66:	3f 81       	ldd	r19, Y+7	; 0x07
    1b68:	22 30       	cpi	r18, 0x02	; 2
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	71 f1       	breq	.+92     	; 0x1bca <MDIO_vSetPinVal+0xb0>
    1b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b70:	9f 81       	ldd	r25, Y+7	; 0x07
    1b72:	83 30       	cpi	r24, 0x03	; 3
    1b74:	91 05       	cpc	r25, r1
    1b76:	e9 f1       	breq	.+122    	; 0x1bf2 <MDIO_vSetPinVal+0xd8>
    1b78:	c7 c0       	rjmp	.+398    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(PORTA,A_u8PinNo);
    1b7a:	ab e3       	ldi	r26, 0x3B	; 59
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	eb e3       	ldi	r30, 0x3B	; 59
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <MDIO_vSetPinVal+0x7e>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <MDIO_vSetPinVal+0x7a>
    1b9c:	84 2b       	or	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	b3 c0       	rjmp	.+358    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(PORTB,A_u8PinNo);
    1ba2:	a8 e3       	ldi	r26, 0x38	; 56
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e8 e3       	ldi	r30, 0x38	; 56
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <MDIO_vSetPinVal+0xa6>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <MDIO_vSetPinVal+0xa2>
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	9f c0       	rjmp	.+318    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(PORTC,A_u8PinNo);
    1bca:	a5 e3       	ldi	r26, 0x35	; 53
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e5 e3       	ldi	r30, 0x35	; 53
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <MDIO_vSetPinVal+0xce>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <MDIO_vSetPinVal+0xca>
    1bec:	84 2b       	or	r24, r20
    1bee:	8c 93       	st	X, r24
    1bf0:	8b c0       	rjmp	.+278    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(PORTD,A_u8PinNo);
    1bf2:	a2 e3       	ldi	r26, 0x32	; 50
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e2 e3       	ldi	r30, 0x32	; 50
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <MDIO_vSetPinVal+0xf6>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <MDIO_vSetPinVal+0xf2>
    1c14:	84 2b       	or	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	77 c0       	rjmp	.+238    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
			break;
		}
	}else if(A_u8PinVal == DIO_LOW)
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	88 23       	and	r24, r24
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <MDIO_vSetPinVal+0x108>
    1c20:	73 c0       	rjmp	.+230    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
	{
		switch(A_u8PortNo)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3d 83       	std	Y+5, r19	; 0x05
    1c2a:	2c 83       	std	Y+4, r18	; 0x04
    1c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	59 f1       	breq	.+86     	; 0x1c8c <MDIO_vSetPinVal+0x172>
    1c36:	2c 81       	ldd	r18, Y+4	; 0x04
    1c38:	3d 81       	ldd	r19, Y+5	; 0x05
    1c3a:	22 30       	cpi	r18, 0x02	; 2
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <MDIO_vSetPinVal+0x130>
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	69 f0       	breq	.+26     	; 0x1c62 <MDIO_vSetPinVal+0x148>
    1c48:	5f c0       	rjmp	.+190    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
    1c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	89 f1       	breq	.+98     	; 0x1cb6 <MDIO_vSetPinVal+0x19c>
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	9d 81       	ldd	r25, Y+5	; 0x05
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <MDIO_vSetPinVal+0x146>
    1c5e:	40 c0       	rjmp	.+128    	; 0x1ce0 <MDIO_vSetPinVal+0x1c6>
    1c60:	53 c0       	rjmp	.+166    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(PORTA,A_u8PinNo);
    1c62:	ab e3       	ldi	r26, 0x3B	; 59
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	eb e3       	ldi	r30, 0x3B	; 59
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 2e       	mov	r0, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <MDIO_vSetPinVal+0x166>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <MDIO_vSetPinVal+0x162>
    1c84:	80 95       	com	r24
    1c86:	84 23       	and	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	3e c0       	rjmp	.+124    	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(PORTB,A_u8PinNo);
    1c8c:	a8 e3       	ldi	r26, 0x38	; 56
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e8 e3       	ldi	r30, 0x38	; 56
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <MDIO_vSetPinVal+0x190>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <MDIO_vSetPinVal+0x18c>
    1cae:	80 95       	com	r24
    1cb0:	84 23       	and	r24, r20
    1cb2:	8c 93       	st	X, r24
    1cb4:	29 c0       	rjmp	.+82     	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(PORTC,A_u8PinNo);
    1cb6:	a5 e3       	ldi	r26, 0x35	; 53
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e5 e3       	ldi	r30, 0x35	; 53
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	48 2f       	mov	r20, r24
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <MDIO_vSetPinVal+0x1ba>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <MDIO_vSetPinVal+0x1b6>
    1cd8:	80 95       	com	r24
    1cda:	84 23       	and	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(PORTD,A_u8PinNo);
    1ce0:	a2 e3       	ldi	r26, 0x32	; 50
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e2 e3       	ldi	r30, 0x32	; 50
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <MDIO_vSetPinVal+0x1e4>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <MDIO_vSetPinVal+0x1e0>
    1d02:	80 95       	com	r24
    1d04:	84 23       	and	r24, r20
    1d06:	8c 93       	st	X, r24
			break;
		}
	}
}
    1d08:	27 96       	adiw	r28, 0x07	; 7
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <MDIO_u8GETPinVal>:
u8 MDIO_u8GETPinVal(u8 A_u8PortNo, u8 A_u8PinNo)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <MDIO_u8GETPinVal+0x6>
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <MDIO_u8GETPinVal+0x8>
    1d22:	0f 92       	push	r0
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	8a 83       	std	Y+2, r24	; 0x02
    1d2a:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal = 0 ;
    1d2c:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortNo)
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	3d 83       	std	Y+5, r19	; 0x05
    1d36:	2c 83       	std	Y+4, r18	; 0x04
    1d38:	4c 81       	ldd	r20, Y+4	; 0x04
    1d3a:	5d 81       	ldd	r21, Y+5	; 0x05
    1d3c:	41 30       	cpi	r20, 0x01	; 1
    1d3e:	51 05       	cpc	r21, r1
    1d40:	41 f1       	breq	.+80     	; 0x1d92 <MDIO_u8GETPinVal+0x78>
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	9d 81       	ldd	r25, Y+5	; 0x05
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	91 05       	cpc	r25, r1
    1d4a:	34 f4       	brge	.+12     	; 0x1d58 <MDIO_u8GETPinVal+0x3e>
    1d4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d50:	21 15       	cp	r18, r1
    1d52:	31 05       	cpc	r19, r1
    1d54:	61 f0       	breq	.+24     	; 0x1d6e <MDIO_u8GETPinVal+0x54>
    1d56:	52 c0       	rjmp	.+164    	; 0x1dfc <MDIO_u8GETPinVal+0xe2>
    1d58:	4c 81       	ldd	r20, Y+4	; 0x04
    1d5a:	5d 81       	ldd	r21, Y+5	; 0x05
    1d5c:	42 30       	cpi	r20, 0x02	; 2
    1d5e:	51 05       	cpc	r21, r1
    1d60:	51 f1       	breq	.+84     	; 0x1db6 <MDIO_u8GETPinVal+0x9c>
    1d62:	8c 81       	ldd	r24, Y+4	; 0x04
    1d64:	9d 81       	ldd	r25, Y+5	; 0x05
    1d66:	83 30       	cpi	r24, 0x03	; 3
    1d68:	91 05       	cpc	r25, r1
    1d6a:	b9 f1       	breq	.+110    	; 0x1dda <MDIO_u8GETPinVal+0xc0>
    1d6c:	47 c0       	rjmp	.+142    	; 0x1dfc <MDIO_u8GETPinVal+0xe2>
	{
	case DIO_PORTA:
		L_u8PinVal = GET_BIT(PINA,A_u8PinNo);
    1d6e:	e9 e3       	ldi	r30, 0x39	; 57
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a9 01       	movw	r20, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <MDIO_u8GETPinVal+0x6c>
    1d82:	55 95       	asr	r21
    1d84:	47 95       	ror	r20
    1d86:	8a 95       	dec	r24
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <MDIO_u8GETPinVal+0x68>
    1d8a:	ca 01       	movw	r24, r20
    1d8c:	81 70       	andi	r24, 0x01	; 1
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	35 c0       	rjmp	.+106    	; 0x1dfc <MDIO_u8GETPinVal+0xe2>
		break;
	case DIO_PORTB:
		L_u8PinVal = GET_BIT(PINB,A_u8PinNo);
    1d92:	e6 e3       	ldi	r30, 0x36	; 54
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a9 01       	movw	r20, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <MDIO_u8GETPinVal+0x90>
    1da6:	55 95       	asr	r21
    1da8:	47 95       	ror	r20
    1daa:	8a 95       	dec	r24
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <MDIO_u8GETPinVal+0x8c>
    1dae:	ca 01       	movw	r24, r20
    1db0:	81 70       	andi	r24, 0x01	; 1
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	23 c0       	rjmp	.+70     	; 0x1dfc <MDIO_u8GETPinVal+0xe2>
		break;
	case DIO_PORTC:
		L_u8PinVal = GET_BIT(PINC,A_u8PinNo);
    1db6:	e3 e3       	ldi	r30, 0x33	; 51
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a9 01       	movw	r20, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <MDIO_u8GETPinVal+0xb4>
    1dca:	55 95       	asr	r21
    1dcc:	47 95       	ror	r20
    1dce:	8a 95       	dec	r24
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <MDIO_u8GETPinVal+0xb0>
    1dd2:	ca 01       	movw	r24, r20
    1dd4:	81 70       	andi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	11 c0       	rjmp	.+34     	; 0x1dfc <MDIO_u8GETPinVal+0xe2>
		break;
	case DIO_PORTD:
		L_u8PinVal = GET_BIT(PIND,A_u8PinNo);
    1dda:	e0 e3       	ldi	r30, 0x30	; 48
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a9 01       	movw	r20, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <MDIO_u8GETPinVal+0xd8>
    1dee:	55 95       	asr	r21
    1df0:	47 95       	ror	r20
    1df2:	8a 95       	dec	r24
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <MDIO_u8GETPinVal+0xd4>
    1df6:	ca 01       	movw	r24, r20
    1df8:	81 70       	andi	r24, 0x01	; 1
    1dfa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return L_u8PinVal;
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <MDIO_vSetPortDir>:

void MDIO_vSetPortDir(u8 A_u8PortNo, u8 A_u8PortDir)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <MDIO_vSetPortDir+0x6>
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <MDIO_vSetPortDir+0x8>
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNo)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	3c 83       	std	Y+4, r19	; 0x04
    1e26:	2b 83       	std	Y+3, r18	; 0x03
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	91 05       	cpc	r25, r1
    1e30:	d1 f0       	breq	.+52     	; 0x1e66 <MDIO_vSetPortDir+0x58>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <MDIO_vSetPortDir+0x38>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	61 f0       	breq	.+24     	; 0x1e5c <MDIO_vSetPortDir+0x4e>
    1e44:	1e c0       	rjmp	.+60     	; 0x1e82 <MDIO_vSetPortDir+0x74>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	81 f0       	breq	.+32     	; 0x1e70 <MDIO_vSetPortDir+0x62>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	91 05       	cpc	r25, r1
    1e58:	81 f0       	breq	.+32     	; 0x1e7a <MDIO_vSetPortDir+0x6c>
    1e5a:	13 c0       	rjmp	.+38     	; 0x1e82 <MDIO_vSetPortDir+0x74>
	{
	case DIO_PORTA:
		DDRA = A_u8PortDir;
    1e5c:	ea e3       	ldi	r30, 0x3A	; 58
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	80 83       	st	Z, r24
    1e64:	0e c0       	rjmp	.+28     	; 0x1e82 <MDIO_vSetPortDir+0x74>
		break;
	case DIO_PORTB:
		DDRB = A_u8PortDir;
    1e66:	e7 e3       	ldi	r30, 0x37	; 55
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	80 83       	st	Z, r24
    1e6e:	09 c0       	rjmp	.+18     	; 0x1e82 <MDIO_vSetPortDir+0x74>
		break;
	case DIO_PORTC:
		DDRC = A_u8PortDir;
    1e70:	e4 e3       	ldi	r30, 0x34	; 52
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	80 83       	st	Z, r24
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <MDIO_vSetPortDir+0x74>
		break;
	case DIO_PORTD:
		DDRD = A_u8PortDir;
    1e7a:	e1 e3       	ldi	r30, 0x31	; 49
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
		break;

	}
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <MDIO_vSetPortVal>:

void MDIO_vSetPortVal(u8 A_u8PortNo, u8 A_u8PortVal)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <MDIO_vSetPortVal+0x6>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <MDIO_vSetPortVal+0x8>
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	3c 83       	std	Y+4, r19	; 0x04
    1ea8:	2b 83       	std	Y+3, r18	; 0x03
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	d1 f0       	breq	.+52     	; 0x1ee8 <MDIO_vSetPortVal+0x58>
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	22 30       	cpi	r18, 0x02	; 2
    1eba:	31 05       	cpc	r19, r1
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <MDIO_vSetPortVal+0x38>
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	61 f0       	breq	.+24     	; 0x1ede <MDIO_vSetPortVal+0x4e>
    1ec6:	1e c0       	rjmp	.+60     	; 0x1f04 <MDIO_vSetPortVal+0x74>
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	22 30       	cpi	r18, 0x02	; 2
    1ece:	31 05       	cpc	r19, r1
    1ed0:	81 f0       	breq	.+32     	; 0x1ef2 <MDIO_vSetPortVal+0x62>
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	83 30       	cpi	r24, 0x03	; 3
    1ed8:	91 05       	cpc	r25, r1
    1eda:	81 f0       	breq	.+32     	; 0x1efc <MDIO_vSetPortVal+0x6c>
    1edc:	13 c0       	rjmp	.+38     	; 0x1f04 <MDIO_vSetPortVal+0x74>
		{
		case DIO_PORTA:
			PORTA = A_u8PortVal;
    1ede:	eb e3       	ldi	r30, 0x3B	; 59
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	80 83       	st	Z, r24
    1ee6:	0e c0       	rjmp	.+28     	; 0x1f04 <MDIO_vSetPortVal+0x74>
			break;
		case DIO_PORTB:
			PORTB = A_u8PortVal;
    1ee8:	e8 e3       	ldi	r30, 0x38	; 56
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	80 83       	st	Z, r24
    1ef0:	09 c0       	rjmp	.+18     	; 0x1f04 <MDIO_vSetPortVal+0x74>
			break;
		case DIO_PORTC:
			PORTC = A_u8PortVal;
    1ef2:	e5 e3       	ldi	r30, 0x35	; 53
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	80 83       	st	Z, r24
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <MDIO_vSetPortVal+0x74>
			break;
		case DIO_PORTD:
			PORTD = A_u8PortVal;
    1efc:	e2 e3       	ldi	r30, 0x32	; 50
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	80 83       	st	Z, r24
			break;

		}
}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <MDIO_u8GETPortVal>:

u8 MDIO_u8GETPortVal(u8 A_u8PortNo)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <MDIO_u8GETPortVal+0x6>
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <MDIO_u8GETPortVal+0x8>
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8Val = 0;
    1f20:	19 82       	std	Y+1, r1	; 0x01
		switch(A_u8PortNo)
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	3c 83       	std	Y+4, r19	; 0x04
    1f2a:	2b 83       	std	Y+3, r18	; 0x03
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	91 05       	cpc	r25, r1
    1f34:	d1 f0       	breq	.+52     	; 0x1f6a <MDIO_u8GETPortVal+0x58>
    1f36:	2b 81       	ldd	r18, Y+3	; 0x03
    1f38:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <MDIO_u8GETPortVal+0x38>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	61 f0       	breq	.+24     	; 0x1f60 <MDIO_u8GETPortVal+0x4e>
    1f48:	1e c0       	rjmp	.+60     	; 0x1f86 <MDIO_u8GETPortVal+0x74>
    1f4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4e:	22 30       	cpi	r18, 0x02	; 2
    1f50:	31 05       	cpc	r19, r1
    1f52:	81 f0       	breq	.+32     	; 0x1f74 <MDIO_u8GETPortVal+0x62>
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	83 30       	cpi	r24, 0x03	; 3
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	81 f0       	breq	.+32     	; 0x1f7e <MDIO_u8GETPortVal+0x6c>
    1f5e:	13 c0       	rjmp	.+38     	; 0x1f86 <MDIO_u8GETPortVal+0x74>
		{
		case DIO_PORTA:
			L_u8Val = PINA;
    1f60:	e9 e3       	ldi	r30, 0x39	; 57
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	0e c0       	rjmp	.+28     	; 0x1f86 <MDIO_u8GETPortVal+0x74>
			break;
		case DIO_PORTB:
			L_u8Val = PINB;
    1f6a:	e6 e3       	ldi	r30, 0x36	; 54
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	09 c0       	rjmp	.+18     	; 0x1f86 <MDIO_u8GETPortVal+0x74>
			break;
		case DIO_PORTC:
			L_u8Val = PINC;
    1f74:	e3 e3       	ldi	r30, 0x33	; 51
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	04 c0       	rjmp	.+8      	; 0x1f86 <MDIO_u8GETPortVal+0x74>
			break;
		case DIO_PORTD:
			L_u8Val = PIND;
    1f7e:	e0 e3       	ldi	r30, 0x30	; 48
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return L_u8Val;
    1f86:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <MDIO_vTogPinVal>:

void MDIO_vTogPinVal(u8 A_u8PortNo, u8 A_u8PinNo)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <MDIO_vTogPinVal+0x6>
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <MDIO_vTogPinVal+0x8>
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	3c 83       	std	Y+4, r19	; 0x04
    1fae:	2b 83       	std	Y+3, r18	; 0x03
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	49 f1       	breq	.+82     	; 0x200c <MDIO_vTogPinVal+0x76>
    1fba:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <MDIO_vTogPinVal+0x38>
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	61 f0       	breq	.+24     	; 0x1fe4 <MDIO_vTogPinVal+0x4e>
    1fcc:	5a c0       	rjmp	.+180    	; 0x2082 <MDIO_vTogPinVal+0xec>
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	71 f1       	breq	.+92     	; 0x2034 <MDIO_vTogPinVal+0x9e>
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	83 30       	cpi	r24, 0x03	; 3
    1fde:	91 05       	cpc	r25, r1
    1fe0:	e9 f1       	breq	.+122    	; 0x205c <MDIO_vTogPinVal+0xc6>
    1fe2:	4f c0       	rjmp	.+158    	; 0x2082 <MDIO_vTogPinVal+0xec>
		{
		case DIO_PORTA:
			TOG_BIT(PORTA,A_u8PinNo);
    1fe4:	ab e3       	ldi	r26, 0x3B	; 59
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	eb e3       	ldi	r30, 0x3B	; 59
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	48 2f       	mov	r20, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <MDIO_vTogPinVal+0x6c>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <MDIO_vTogPinVal+0x68>
    2006:	84 27       	eor	r24, r20
    2008:	8c 93       	st	X, r24
    200a:	3b c0       	rjmp	.+118    	; 0x2082 <MDIO_vTogPinVal+0xec>
			break;
		case DIO_PORTB:
			TOG_BIT(PORTB,A_u8PinNo);
    200c:	a8 e3       	ldi	r26, 0x38	; 56
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e8 e3       	ldi	r30, 0x38	; 56
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	48 2f       	mov	r20, r24
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	02 2e       	mov	r0, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <MDIO_vTogPinVal+0x94>
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	0a 94       	dec	r0
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <MDIO_vTogPinVal+0x90>
    202e:	84 27       	eor	r24, r20
    2030:	8c 93       	st	X, r24
    2032:	27 c0       	rjmp	.+78     	; 0x2082 <MDIO_vTogPinVal+0xec>
			break;
		case DIO_PORTC:
			TOG_BIT(PORTC,A_u8PinNo);
    2034:	a5 e3       	ldi	r26, 0x35	; 53
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e5 e3       	ldi	r30, 0x35	; 53
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	48 2f       	mov	r20, r24
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 2e       	mov	r0, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <MDIO_vTogPinVal+0xbc>
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	0a 94       	dec	r0
    2054:	e2 f7       	brpl	.-8      	; 0x204e <MDIO_vTogPinVal+0xb8>
    2056:	84 27       	eor	r24, r20
    2058:	8c 93       	st	X, r24
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <MDIO_vTogPinVal+0xec>
			break;
		case DIO_PORTD:
			TOG_BIT(PORTD,A_u8PinNo);
    205c:	a2 e3       	ldi	r26, 0x32	; 50
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e2 e3       	ldi	r30, 0x32	; 50
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 2e       	mov	r0, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <MDIO_vTogPinVal+0xe4>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <MDIO_vTogPinVal+0xe0>
    207e:	84 27       	eor	r24, r20
    2080:	8c 93       	st	X, r24
			break;

		}
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <MADC_vInit>:
#include "ADC_int.h"
#include "ADC_prv.h"


void MADC_vInit(void)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	/* Reference voltage (AVCC)*/
	CLR_BIT(ADMUX, REFS1);
    2098:	a7 e2       	ldi	r26, 0x27	; 39
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e7 e2       	ldi	r30, 0x27	; 39
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	8f 77       	andi	r24, 0x7F	; 127
    20a4:	8c 93       	st	X, r24
	SET_BIT(ADMUX, 6);
    20a6:	a7 e2       	ldi	r26, 0x27	; 39
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e7 e2       	ldi	r30, 0x27	; 39
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	80 64       	ori	r24, 0x40	; 64
    20b2:	8c 93       	st	X, r24

	/* Data adjustment (right) */
	CLR_BIT(ADMUX, 5);
    20b4:	a7 e2       	ldi	r26, 0x27	; 39
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e7 e2       	ldi	r30, 0x27	; 39
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	8f 7d       	andi	r24, 0xDF	; 223
    20c0:	8c 93       	st	X, r24

	/* Select prescaler 64 */
//	ADCSRA = (ADCSRA & (0xF8)) | ((0x07)&(prescaller));
	SET_BIT(ADCSRA,2);
    20c2:	a6 e2       	ldi	r26, 0x26	; 38
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e6 e2       	ldi	r30, 0x26	; 38
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	84 60       	ori	r24, 0x04	; 4
    20ce:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    20d0:	a6 e2       	ldi	r26, 0x26	; 38
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e6 e2       	ldi	r30, 0x26	; 38
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	82 60       	ori	r24, 0x02	; 2
    20dc:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,0);
    20de:	a6 e2       	ldi	r26, 0x26	; 38
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e6 e2       	ldi	r30, 0x26	; 38
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8e 7f       	andi	r24, 0xFE	; 254
    20ea:	8c 93       	st	X, r24

	/* Auto trigger or manual */
	CLR_BIT(ADCSRA, 5);
    20ec:	a6 e2       	ldi	r26, 0x26	; 38
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e6 e2       	ldi	r30, 0x26	; 38
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8f 7d       	andi	r24, 0xDF	; 223
    20f8:	8c 93       	st	X, r24

	/* Interrupt enable/disable */
	CLR_BIT(ADCSRA, 3);
    20fa:	a6 e2       	ldi	r26, 0x26	; 38
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e6 e2       	ldi	r30, 0x26	; 38
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	87 7f       	andi	r24, 0xF7	; 247
    2106:	8c 93       	st	X, r24

	/* Enable ADC */
	SET_BIT(ADCSRA, 7);
    2108:	a6 e2       	ldi	r26, 0x26	; 38
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e6 e2       	ldi	r30, 0x26	; 38
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	80 68       	ori	r24, 0x80	; 128
    2114:	8c 93       	st	X, r24

}
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <MADC_u16AnalogRead>:

u16  MADC_u16AnalogRead(u8 A_u8Channel)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	0f 92       	push	r0
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	89 83       	std	Y+1, r24	; 0x01
	/* Select channel in Single Ended Input mode */
	ADMUX = (ADMUX & (0xE0)) | (A_u8Channel & 0x07);
    2128:	a7 e2       	ldi	r26, 0x27	; 39
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e7 e2       	ldi	r30, 0x27	; 39
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	98 2f       	mov	r25, r24
    2134:	90 7e       	andi	r25, 0xE0	; 224
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	87 70       	andi	r24, 0x07	; 7
    213a:	89 2b       	or	r24, r25
    213c:	8c 93       	st	X, r24

	/* Start conversion */
	SET_BIT(ADCSRA, 6);
    213e:	a6 e2       	ldi	r26, 0x26	; 38
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e6 e2       	ldi	r30, 0x26	; 38
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	80 64       	ori	r24, 0x40	; 64
    214a:	8c 93       	st	X, r24

	/* Wait for flag to be raised */
	while(GET_BIT(ADCSRA, 4) == 0){}
    214c:	e6 e2       	ldi	r30, 0x26	; 38
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	82 95       	swap	r24
    2154:	8f 70       	andi	r24, 0x0F	; 15
    2156:	88 2f       	mov	r24, r24
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	90 70       	andi	r25, 0x00	; 0
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	a9 f3       	breq	.-22     	; 0x214c <MADC_u16AnalogRead+0x30>

	/* Clear flag */
	SET_BIT(ADCSRA, 4);
    2162:	a6 e2       	ldi	r26, 0x26	; 38
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e6 e2       	ldi	r30, 0x26	; 38
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 61       	ori	r24, 0x10	; 16
    216e:	8c 93       	st	X, r24

	return ADC;
    2170:	e4 e2       	ldi	r30, 0x24	; 36
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
}
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <STEPPER_vInit>:
#include "../../MCAL/DIO/DIO_int.h"

#include "STEPPER_int.h"

void STEPPER_vInit(void)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(STEPPET_PORT, STEPPER_BLUE_T, DIO_OUTPUT);
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	MDIO_vSetPinDir(STEPPET_PORT, STEPPER_PINK_T, DIO_OUTPUT);
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	61 e0       	ldi	r22, 0x01	; 1
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	MDIO_vSetPinDir(STEPPET_PORT, STEPPER_YELLOW_T, DIO_OUTPUT);
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	63 e0       	ldi	r22, 0x03	; 3
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	MDIO_vSetPinDir(STEPPET_PORT, STEPPER_ORANGE_T, DIO_OUTPUT);
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	62 e0       	ldi	r22, 0x02	; 2
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
}
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <STEPPER_vRotateCW>:
void STEPPER_vRotateCW(f64 A_f64Speed) /* TODO : angle */
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	ec 97       	sbiw	r28, 0x3c	; 60
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	69 af       	std	Y+57, r22	; 0x39
    21cc:	7a af       	std	Y+58, r23	; 0x3a
    21ce:	8b af       	std	Y+59, r24	; 0x3b
    21d0:	9c af       	std	Y+60, r25	; 0x3c
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_BLUE_T,   DIO_HIGH);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_PINK_T,   DIO_LOW);
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	61 e0       	ldi	r22, 0x01	; 1
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_YELLOW_T, DIO_LOW);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	63 e0       	ldi	r22, 0x03	; 3
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_ORANGE_T, DIO_LOW);
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    21fa:	89 ad       	ldd	r24, Y+57	; 0x39
    21fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    21fe:	ab ad       	ldd	r26, Y+59	; 0x3b
    2200:	bc ad       	ldd	r27, Y+60	; 0x3c
    2202:	8d ab       	std	Y+53, r24	; 0x35
    2204:	9e ab       	std	Y+54, r25	; 0x36
    2206:	af ab       	std	Y+55, r26	; 0x37
    2208:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220a:	6d a9       	ldd	r22, Y+53	; 0x35
    220c:	7e a9       	ldd	r23, Y+54	; 0x36
    220e:	8f a9       	ldd	r24, Y+55	; 0x37
    2210:	98 ad       	ldd	r25, Y+56	; 0x38
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a ef       	ldi	r20, 0xFA	; 250
    2218:	54 e4       	ldi	r21, 0x44	; 68
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	89 ab       	std	Y+49, r24	; 0x31
    2224:	9a ab       	std	Y+50, r25	; 0x32
    2226:	ab ab       	std	Y+51, r26	; 0x33
    2228:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    222a:	69 a9       	ldd	r22, Y+49	; 0x31
    222c:	7a a9       	ldd	r23, Y+50	; 0x32
    222e:	8b a9       	ldd	r24, Y+51	; 0x33
    2230:	9c a9       	ldd	r25, Y+52	; 0x34
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e3       	ldi	r21, 0x3F	; 63
    223a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223e:	88 23       	and	r24, r24
    2240:	2c f4       	brge	.+10     	; 0x224c <STEPPER_vRotateCW+0x96>
		__ticks = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	98 ab       	std	Y+48, r25	; 0x30
    2248:	8f a7       	std	Y+47, r24	; 0x2f
    224a:	3f c0       	rjmp	.+126    	; 0x22ca <STEPPER_vRotateCW+0x114>
	else if (__tmp > 65535)
    224c:	69 a9       	ldd	r22, Y+49	; 0x31
    224e:	7a a9       	ldd	r23, Y+50	; 0x32
    2250:	8b a9       	ldd	r24, Y+51	; 0x33
    2252:	9c a9       	ldd	r25, Y+52	; 0x34
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	3f ef       	ldi	r19, 0xFF	; 255
    2258:	4f e7       	ldi	r20, 0x7F	; 127
    225a:	57 e4       	ldi	r21, 0x47	; 71
    225c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2260:	18 16       	cp	r1, r24
    2262:	4c f5       	brge	.+82     	; 0x22b6 <STEPPER_vRotateCW+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2264:	6d a9       	ldd	r22, Y+53	; 0x35
    2266:	7e a9       	ldd	r23, Y+54	; 0x36
    2268:	8f a9       	ldd	r24, Y+55	; 0x37
    226a:	98 ad       	ldd	r25, Y+56	; 0x38
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	51 e4       	ldi	r21, 0x41	; 65
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	98 ab       	std	Y+48, r25	; 0x30
    228a:	8f a7       	std	Y+47, r24	; 0x2f
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <STEPPER_vRotateCW+0xf6>
    228e:	88 ec       	ldi	r24, 0xC8	; 200
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	9e a7       	std	Y+46, r25	; 0x2e
    2294:	8d a7       	std	Y+45, r24	; 0x2d
    2296:	8d a5       	ldd	r24, Y+45	; 0x2d
    2298:	9e a5       	ldd	r25, Y+46	; 0x2e
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <STEPPER_vRotateCW+0xe4>
    229e:	9e a7       	std	Y+46, r25	; 0x2e
    22a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a4:	98 a9       	ldd	r25, Y+48	; 0x30
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	98 ab       	std	Y+48, r25	; 0x30
    22aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ae:	98 a9       	ldd	r25, Y+48	; 0x30
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	69 f7       	brne	.-38     	; 0x228e <STEPPER_vRotateCW+0xd8>
    22b4:	14 c0       	rjmp	.+40     	; 0x22de <STEPPER_vRotateCW+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b6:	69 a9       	ldd	r22, Y+49	; 0x31
    22b8:	7a a9       	ldd	r23, Y+50	; 0x32
    22ba:	8b a9       	ldd	r24, Y+51	; 0x33
    22bc:	9c a9       	ldd	r25, Y+52	; 0x34
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	98 ab       	std	Y+48, r25	; 0x30
    22c8:	8f a7       	std	Y+47, r24	; 0x2f
    22ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    22cc:	98 a9       	ldd	r25, Y+48	; 0x30
    22ce:	9c a7       	std	Y+44, r25	; 0x2c
    22d0:	8b a7       	std	Y+43, r24	; 0x2b
    22d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <STEPPER_vRotateCW+0x120>
    22da:	9c a7       	std	Y+44, r25	; 0x2c
    22dc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(A_f64Speed);
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_BLUE_T,   DIO_LOW);
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_PINK_T,   DIO_HIGH);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	41 e0       	ldi	r20, 0x01	; 1
    22ee:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_YELLOW_T, DIO_LOW);
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	63 e0       	ldi	r22, 0x03	; 3
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_ORANGE_T, DIO_LOW);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	62 e0       	ldi	r22, 0x02	; 2
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    2306:	89 ad       	ldd	r24, Y+57	; 0x39
    2308:	9a ad       	ldd	r25, Y+58	; 0x3a
    230a:	ab ad       	ldd	r26, Y+59	; 0x3b
    230c:	bc ad       	ldd	r27, Y+60	; 0x3c
    230e:	8f a3       	std	Y+39, r24	; 0x27
    2310:	98 a7       	std	Y+40, r25	; 0x28
    2312:	a9 a7       	std	Y+41, r26	; 0x29
    2314:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6f a1       	ldd	r22, Y+39	; 0x27
    2318:	78 a5       	ldd	r23, Y+40	; 0x28
    231a:	89 a5       	ldd	r24, Y+41	; 0x29
    231c:	9a a5       	ldd	r25, Y+42	; 0x2a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8b a3       	std	Y+35, r24	; 0x23
    2330:	9c a3       	std	Y+36, r25	; 0x24
    2332:	ad a3       	std	Y+37, r26	; 0x25
    2334:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <STEPPER_vRotateCW+0x1a2>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9a a3       	std	Y+34, r25	; 0x22
    2354:	89 a3       	std	Y+33, r24	; 0x21
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <STEPPER_vRotateCW+0x220>
	else if (__tmp > 65535)
    2358:	6b a1       	ldd	r22, Y+35	; 0x23
    235a:	7c a1       	ldd	r23, Y+36	; 0x24
    235c:	8d a1       	ldd	r24, Y+37	; 0x25
    235e:	9e a1       	ldd	r25, Y+38	; 0x26
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <STEPPER_vRotateCW+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6f a1       	ldd	r22, Y+39	; 0x27
    2372:	78 a5       	ldd	r23, Y+40	; 0x28
    2374:	89 a5       	ldd	r24, Y+41	; 0x29
    2376:	9a a5       	ldd	r25, Y+42	; 0x2a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9a a3       	std	Y+34, r25	; 0x22
    2396:	89 a3       	std	Y+33, r24	; 0x21
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <STEPPER_vRotateCW+0x202>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	98 a3       	std	Y+32, r25	; 0x20
    23a0:	8f 8f       	std	Y+31, r24	; 0x1f
    23a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a4:	98 a1       	ldd	r25, Y+32	; 0x20
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <STEPPER_vRotateCW+0x1f0>
    23aa:	98 a3       	std	Y+32, r25	; 0x20
    23ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	89 a1       	ldd	r24, Y+33	; 0x21
    23b0:	9a a1       	ldd	r25, Y+34	; 0x22
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9a a3       	std	Y+34, r25	; 0x22
    23b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ba:	9a a1       	ldd	r25, Y+34	; 0x22
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <STEPPER_vRotateCW+0x1e4>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <STEPPER_vRotateCW+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6b a1       	ldd	r22, Y+35	; 0x23
    23c4:	7c a1       	ldd	r23, Y+36	; 0x24
    23c6:	8d a1       	ldd	r24, Y+37	; 0x25
    23c8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9a a3       	std	Y+34, r25	; 0x22
    23d4:	89 a3       	std	Y+33, r24	; 0x21
    23d6:	89 a1       	ldd	r24, Y+33	; 0x21
    23d8:	9a a1       	ldd	r25, Y+34	; 0x22
    23da:	9e 8f       	std	Y+30, r25	; 0x1e
    23dc:	8d 8f       	std	Y+29, r24	; 0x1d
    23de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <STEPPER_vRotateCW+0x22c>
    23e6:	9e 8f       	std	Y+30, r25	; 0x1e
    23e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(A_f64Speed);
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_BLUE_T,   DIO_LOW);
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_PINK_T,   DIO_LOW);
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_YELLOW_T, DIO_HIGH);
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	63 e0       	ldi	r22, 0x03	; 3
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_ORANGE_T, DIO_LOW);
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	62 e0       	ldi	r22, 0x02	; 2
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    2412:	89 ad       	ldd	r24, Y+57	; 0x39
    2414:	9a ad       	ldd	r25, Y+58	; 0x3a
    2416:	ab ad       	ldd	r26, Y+59	; 0x3b
    2418:	bc ad       	ldd	r27, Y+60	; 0x3c
    241a:	89 8f       	std	Y+25, r24	; 0x19
    241c:	9a 8f       	std	Y+26, r25	; 0x1a
    241e:	ab 8f       	std	Y+27, r26	; 0x1b
    2420:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	69 8d       	ldd	r22, Y+25	; 0x19
    2424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a ef       	ldi	r20, 0xFA	; 250
    2430:	54 e4       	ldi	r21, 0x44	; 68
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	8d 8b       	std	Y+21, r24	; 0x15
    243c:	9e 8b       	std	Y+22, r25	; 0x16
    243e:	af 8b       	std	Y+23, r26	; 0x17
    2440:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2442:	6d 89       	ldd	r22, Y+21	; 0x15
    2444:	7e 89       	ldd	r23, Y+22	; 0x16
    2446:	8f 89       	ldd	r24, Y+23	; 0x17
    2448:	98 8d       	ldd	r25, Y+24	; 0x18
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	2c f4       	brge	.+10     	; 0x2464 <STEPPER_vRotateCW+0x2ae>
		__ticks = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	8b 8b       	std	Y+19, r24	; 0x13
    2462:	3f c0       	rjmp	.+126    	; 0x24e2 <STEPPER_vRotateCW+0x32c>
	else if (__tmp > 65535)
    2464:	6d 89       	ldd	r22, Y+21	; 0x15
    2466:	7e 89       	ldd	r23, Y+22	; 0x16
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	4c f5       	brge	.+82     	; 0x24ce <STEPPER_vRotateCW+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	69 8d       	ldd	r22, Y+25	; 0x19
    247e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2482:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9c 8b       	std	Y+20, r25	; 0x14
    24a2:	8b 8b       	std	Y+19, r24	; 0x13
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <STEPPER_vRotateCW+0x30e>
    24a6:	88 ec       	ldi	r24, 0xC8	; 200
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9a 8b       	std	Y+18, r25	; 0x12
    24ac:	89 8b       	std	Y+17, r24	; 0x11
    24ae:	89 89       	ldd	r24, Y+17	; 0x11
    24b0:	9a 89       	ldd	r25, Y+18	; 0x12
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <STEPPER_vRotateCW+0x2fc>
    24b6:	9a 8b       	std	Y+18, r25	; 0x12
    24b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	8b 89       	ldd	r24, Y+19	; 0x13
    24bc:	9c 89       	ldd	r25, Y+20	; 0x14
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	9c 8b       	std	Y+20, r25	; 0x14
    24c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	8b 89       	ldd	r24, Y+19	; 0x13
    24c6:	9c 89       	ldd	r25, Y+20	; 0x14
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <STEPPER_vRotateCW+0x2f0>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <STEPPER_vRotateCW+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	6d 89       	ldd	r22, Y+21	; 0x15
    24d0:	7e 89       	ldd	r23, Y+22	; 0x16
    24d2:	8f 89       	ldd	r24, Y+23	; 0x17
    24d4:	98 8d       	ldd	r25, Y+24	; 0x18
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9c 8b       	std	Y+20, r25	; 0x14
    24e0:	8b 8b       	std	Y+19, r24	; 0x13
    24e2:	8b 89       	ldd	r24, Y+19	; 0x13
    24e4:	9c 89       	ldd	r25, Y+20	; 0x14
    24e6:	98 8b       	std	Y+16, r25	; 0x10
    24e8:	8f 87       	std	Y+15, r24	; 0x0f
    24ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ec:	98 89       	ldd	r25, Y+16	; 0x10
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <STEPPER_vRotateCW+0x338>
    24f2:	98 8b       	std	Y+16, r25	; 0x10
    24f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(A_f64Speed);
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_BLUE_T,   DIO_LOW);
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_PINK_T,   DIO_LOW);
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	61 e0       	ldi	r22, 0x01	; 1
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_YELLOW_T, DIO_LOW);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	63 e0       	ldi	r22, 0x03	; 3
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_ORANGE_T, DIO_HIGH);
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	62 e0       	ldi	r22, 0x02	; 2
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    251e:	89 ad       	ldd	r24, Y+57	; 0x39
    2520:	9a ad       	ldd	r25, Y+58	; 0x3a
    2522:	ab ad       	ldd	r26, Y+59	; 0x3b
    2524:	bc ad       	ldd	r27, Y+60	; 0x3c
    2526:	8b 87       	std	Y+11, r24	; 0x0b
    2528:	9c 87       	std	Y+12, r25	; 0x0c
    252a:	ad 87       	std	Y+13, r26	; 0x0d
    252c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a ef       	ldi	r20, 0xFA	; 250
    253c:	54 e4       	ldi	r21, 0x44	; 68
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8f 83       	std	Y+7, r24	; 0x07
    2548:	98 87       	std	Y+8, r25	; 0x08
    254a:	a9 87       	std	Y+9, r26	; 0x09
    254c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254e:	6f 81       	ldd	r22, Y+7	; 0x07
    2550:	78 85       	ldd	r23, Y+8	; 0x08
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	5f e3       	ldi	r21, 0x3F	; 63
    255e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2562:	88 23       	and	r24, r24
    2564:	2c f4       	brge	.+10     	; 0x2570 <STEPPER_vRotateCW+0x3ba>
		__ticks = 1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <STEPPER_vRotateCW+0x438>
	else if (__tmp > 65535)
    2570:	6f 81       	ldd	r22, Y+7	; 0x07
    2572:	78 85       	ldd	r23, Y+8	; 0x08
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	3f ef       	ldi	r19, 0xFF	; 255
    257c:	4f e7       	ldi	r20, 0x7F	; 127
    257e:	57 e4       	ldi	r21, 0x47	; 71
    2580:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2584:	18 16       	cp	r1, r24
    2586:	4c f5       	brge	.+82     	; 0x25da <STEPPER_vRotateCW+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <STEPPER_vRotateCW+0x41a>
    25b2:	88 ec       	ldi	r24, 0xC8	; 200
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <STEPPER_vRotateCW+0x408>
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <STEPPER_vRotateCW+0x3fc>
    25d8:	14 c0       	rjmp	.+40     	; 0x2602 <STEPPER_vRotateCW+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <STEPPER_vRotateCW+0x444>
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(A_f64Speed);
}
    2602:	ec 96       	adiw	r28, 0x3c	; 60
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <STEPPER_vRotateCCW>:
void STEPPER_vRotateCCW(f64 A_f64Speed) /* TODO : angle */
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	ae 97       	sbiw	r28, 0x2e	; 46
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	6b a7       	std	Y+43, r22	; 0x2b
    262a:	7c a7       	std	Y+44, r23	; 0x2c
    262c:	8d a7       	std	Y+45, r24	; 0x2d
    262e:	9e a7       	std	Y+46, r25	; 0x2e
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_BLUE_T,   DIO_LOW);
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_PINK_T,   DIO_LOW);
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	61 e0       	ldi	r22, 0x01	; 1
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_YELLOW_T, DIO_LOW);
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	63 e0       	ldi	r22, 0x03	; 3
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_ORANGE_T, DIO_HIGH);
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	62 e0       	ldi	r22, 0x02	; 2
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    2658:	8b a5       	ldd	r24, Y+43	; 0x2b
    265a:	9c a5       	ldd	r25, Y+44	; 0x2c
    265c:	ad a5       	ldd	r26, Y+45	; 0x2d
    265e:	be a5       	ldd	r27, Y+46	; 0x2e
    2660:	8f a3       	std	Y+39, r24	; 0x27
    2662:	98 a7       	std	Y+40, r25	; 0x28
    2664:	a9 a7       	std	Y+41, r26	; 0x29
    2666:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2668:	6f a1       	ldd	r22, Y+39	; 0x27
    266a:	78 a5       	ldd	r23, Y+40	; 0x28
    266c:	89 a5       	ldd	r24, Y+41	; 0x29
    266e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a ef       	ldi	r20, 0xFA	; 250
    2676:	54 e4       	ldi	r21, 0x44	; 68
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	8b a3       	std	Y+35, r24	; 0x23
    2682:	9c a3       	std	Y+36, r25	; 0x24
    2684:	ad a3       	std	Y+37, r26	; 0x25
    2686:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2688:	6b a1       	ldd	r22, Y+35	; 0x23
    268a:	7c a1       	ldd	r23, Y+36	; 0x24
    268c:	8d a1       	ldd	r24, Y+37	; 0x25
    268e:	9e a1       	ldd	r25, Y+38	; 0x26
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    269c:	88 23       	and	r24, r24
    269e:	2c f4       	brge	.+10     	; 0x26aa <STEPPER_vRotateCCW+0x96>
		__ticks = 1;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	9a a3       	std	Y+34, r25	; 0x22
    26a6:	89 a3       	std	Y+33, r24	; 0x21
    26a8:	3f c0       	rjmp	.+126    	; 0x2728 <STEPPER_vRotateCCW+0x114>
	else if (__tmp > 65535)
    26aa:	6b a1       	ldd	r22, Y+35	; 0x23
    26ac:	7c a1       	ldd	r23, Y+36	; 0x24
    26ae:	8d a1       	ldd	r24, Y+37	; 0x25
    26b0:	9e a1       	ldd	r25, Y+38	; 0x26
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	4c f5       	brge	.+82     	; 0x2714 <STEPPER_vRotateCCW+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c2:	6f a1       	ldd	r22, Y+39	; 0x27
    26c4:	78 a5       	ldd	r23, Y+40	; 0x28
    26c6:	89 a5       	ldd	r24, Y+41	; 0x29
    26c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e2       	ldi	r20, 0x20	; 32
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9a a3       	std	Y+34, r25	; 0x22
    26e8:	89 a3       	std	Y+33, r24	; 0x21
    26ea:	0f c0       	rjmp	.+30     	; 0x270a <STEPPER_vRotateCCW+0xf6>
    26ec:	88 ec       	ldi	r24, 0xC8	; 200
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	98 a3       	std	Y+32, r25	; 0x20
    26f2:	8f 8f       	std	Y+31, r24	; 0x1f
    26f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f6:	98 a1       	ldd	r25, Y+32	; 0x20
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <STEPPER_vRotateCCW+0xe4>
    26fc:	98 a3       	std	Y+32, r25	; 0x20
    26fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2700:	89 a1       	ldd	r24, Y+33	; 0x21
    2702:	9a a1       	ldd	r25, Y+34	; 0x22
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	9a a3       	std	Y+34, r25	; 0x22
    2708:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	89 a1       	ldd	r24, Y+33	; 0x21
    270c:	9a a1       	ldd	r25, Y+34	; 0x22
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	69 f7       	brne	.-38     	; 0x26ec <STEPPER_vRotateCCW+0xd8>
    2712:	14 c0       	rjmp	.+40     	; 0x273c <STEPPER_vRotateCCW+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	6b a1       	ldd	r22, Y+35	; 0x23
    2716:	7c a1       	ldd	r23, Y+36	; 0x24
    2718:	8d a1       	ldd	r24, Y+37	; 0x25
    271a:	9e a1       	ldd	r25, Y+38	; 0x26
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9a a3       	std	Y+34, r25	; 0x22
    2726:	89 a3       	std	Y+33, r24	; 0x21
    2728:	89 a1       	ldd	r24, Y+33	; 0x21
    272a:	9a a1       	ldd	r25, Y+34	; 0x22
    272c:	9e 8f       	std	Y+30, r25	; 0x1e
    272e:	8d 8f       	std	Y+29, r24	; 0x1d
    2730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2732:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <STEPPER_vRotateCCW+0x120>
    2738:	9e 8f       	std	Y+30, r25	; 0x1e
    273a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(A_f64Speed);
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_BLUE_T,   DIO_LOW);
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_PINK_T,   DIO_LOW);
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_YELLOW_T, DIO_HIGH);
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	63 e0       	ldi	r22, 0x03	; 3
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_ORANGE_T, DIO_LOW);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	62 e0       	ldi	r22, 0x02	; 2
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    2764:	8b a5       	ldd	r24, Y+43	; 0x2b
    2766:	9c a5       	ldd	r25, Y+44	; 0x2c
    2768:	ad a5       	ldd	r26, Y+45	; 0x2d
    276a:	be a5       	ldd	r27, Y+46	; 0x2e
    276c:	89 8f       	std	Y+25, r24	; 0x19
    276e:	9a 8f       	std	Y+26, r25	; 0x1a
    2770:	ab 8f       	std	Y+27, r26	; 0x1b
    2772:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	69 8d       	ldd	r22, Y+25	; 0x19
    2776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a ef       	ldi	r20, 0xFA	; 250
    2782:	54 e4       	ldi	r21, 0x44	; 68
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	8d 8b       	std	Y+21, r24	; 0x15
    278e:	9e 8b       	std	Y+22, r25	; 0x16
    2790:	af 8b       	std	Y+23, r26	; 0x17
    2792:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2794:	6d 89       	ldd	r22, Y+21	; 0x15
    2796:	7e 89       	ldd	r23, Y+22	; 0x16
    2798:	8f 89       	ldd	r24, Y+23	; 0x17
    279a:	98 8d       	ldd	r25, Y+24	; 0x18
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <STEPPER_vRotateCCW+0x1a2>
		__ticks = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9c 8b       	std	Y+20, r25	; 0x14
    27b2:	8b 8b       	std	Y+19, r24	; 0x13
    27b4:	3f c0       	rjmp	.+126    	; 0x2834 <STEPPER_vRotateCCW+0x220>
	else if (__tmp > 65535)
    27b6:	6d 89       	ldd	r22, Y+21	; 0x15
    27b8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ba:	8f 89       	ldd	r24, Y+23	; 0x17
    27bc:	98 8d       	ldd	r25, Y+24	; 0x18
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	4c f5       	brge	.+82     	; 0x2820 <STEPPER_vRotateCCW+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	69 8d       	ldd	r22, Y+25	; 0x19
    27d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9c 8b       	std	Y+20, r25	; 0x14
    27f4:	8b 8b       	std	Y+19, r24	; 0x13
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <STEPPER_vRotateCCW+0x202>
    27f8:	88 ec       	ldi	r24, 0xC8	; 200
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9a 8b       	std	Y+18, r25	; 0x12
    27fe:	89 8b       	std	Y+17, r24	; 0x11
    2800:	89 89       	ldd	r24, Y+17	; 0x11
    2802:	9a 89       	ldd	r25, Y+18	; 0x12
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <STEPPER_vRotateCCW+0x1f0>
    2808:	9a 8b       	std	Y+18, r25	; 0x12
    280a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	8b 89       	ldd	r24, Y+19	; 0x13
    280e:	9c 89       	ldd	r25, Y+20	; 0x14
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	9c 8b       	std	Y+20, r25	; 0x14
    2814:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	9c 89       	ldd	r25, Y+20	; 0x14
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <STEPPER_vRotateCCW+0x1e4>
    281e:	14 c0       	rjmp	.+40     	; 0x2848 <STEPPER_vRotateCCW+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	6d 89       	ldd	r22, Y+21	; 0x15
    2822:	7e 89       	ldd	r23, Y+22	; 0x16
    2824:	8f 89       	ldd	r24, Y+23	; 0x17
    2826:	98 8d       	ldd	r25, Y+24	; 0x18
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9c 8b       	std	Y+20, r25	; 0x14
    2832:	8b 8b       	std	Y+19, r24	; 0x13
    2834:	8b 89       	ldd	r24, Y+19	; 0x13
    2836:	9c 89       	ldd	r25, Y+20	; 0x14
    2838:	98 8b       	std	Y+16, r25	; 0x10
    283a:	8f 87       	std	Y+15, r24	; 0x0f
    283c:	8f 85       	ldd	r24, Y+15	; 0x0f
    283e:	98 89       	ldd	r25, Y+16	; 0x10
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <STEPPER_vRotateCCW+0x22c>
    2844:	98 8b       	std	Y+16, r25	; 0x10
    2846:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(A_f64Speed);
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_BLUE_T,   DIO_LOW);
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_PINK_T,   DIO_HIGH);
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	61 e0       	ldi	r22, 0x01	; 1
    2856:	41 e0       	ldi	r20, 0x01	; 1
    2858:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_YELLOW_T, DIO_LOW);
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	63 e0       	ldi	r22, 0x03	; 3
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_ORANGE_T, DIO_LOW);
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    2870:	8b a5       	ldd	r24, Y+43	; 0x2b
    2872:	9c a5       	ldd	r25, Y+44	; 0x2c
    2874:	ad a5       	ldd	r26, Y+45	; 0x2d
    2876:	be a5       	ldd	r27, Y+46	; 0x2e
    2878:	8b 87       	std	Y+11, r24	; 0x0b
    287a:	9c 87       	std	Y+12, r25	; 0x0c
    287c:	ad 87       	std	Y+13, r26	; 0x0d
    287e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2880:	6b 85       	ldd	r22, Y+11	; 0x0b
    2882:	7c 85       	ldd	r23, Y+12	; 0x0c
    2884:	8d 85       	ldd	r24, Y+13	; 0x0d
    2886:	9e 85       	ldd	r25, Y+14	; 0x0e
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4a ef       	ldi	r20, 0xFA	; 250
    288e:	54 e4       	ldi	r21, 0x44	; 68
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	8f 83       	std	Y+7, r24	; 0x07
    289a:	98 87       	std	Y+8, r25	; 0x08
    289c:	a9 87       	std	Y+9, r26	; 0x09
    289e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a0:	6f 81       	ldd	r22, Y+7	; 0x07
    28a2:	78 85       	ldd	r23, Y+8	; 0x08
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e8       	ldi	r20, 0x80	; 128
    28ae:	5f e3       	ldi	r21, 0x3F	; 63
    28b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b4:	88 23       	and	r24, r24
    28b6:	2c f4       	brge	.+10     	; 0x28c2 <STEPPER_vRotateCCW+0x2ae>
		__ticks = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	8d 83       	std	Y+5, r24	; 0x05
    28c0:	3f c0       	rjmp	.+126    	; 0x2940 <STEPPER_vRotateCCW+0x32c>
	else if (__tmp > 65535)
    28c2:	6f 81       	ldd	r22, Y+7	; 0x07
    28c4:	78 85       	ldd	r23, Y+8	; 0x08
    28c6:	89 85       	ldd	r24, Y+9	; 0x09
    28c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	3f ef       	ldi	r19, 0xFF	; 255
    28ce:	4f e7       	ldi	r20, 0x7F	; 127
    28d0:	57 e4       	ldi	r21, 0x47	; 71
    28d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d6:	18 16       	cp	r1, r24
    28d8:	4c f5       	brge	.+82     	; 0x292c <STEPPER_vRotateCCW+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28da:	6b 85       	ldd	r22, Y+11	; 0x0b
    28dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28de:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e2       	ldi	r20, 0x20	; 32
    28e8:	51 e4       	ldi	r21, 0x41	; 65
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	0f c0       	rjmp	.+30     	; 0x2922 <STEPPER_vRotateCCW+0x30e>
    2904:	88 ec       	ldi	r24, 0xC8	; 200
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9c 83       	std	Y+4, r25	; 0x04
    290a:	8b 83       	std	Y+3, r24	; 0x03
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <STEPPER_vRotateCCW+0x2fc>
    2914:	9c 83       	std	Y+4, r25	; 0x04
    2916:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	69 f7       	brne	.-38     	; 0x2904 <STEPPER_vRotateCCW+0x2f0>
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <STEPPER_vRotateCCW+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	9e 83       	std	Y+6, r25	; 0x06
    293e:	8d 83       	std	Y+5, r24	; 0x05
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	9a 83       	std	Y+2, r25	; 0x02
    2946:	89 83       	std	Y+1, r24	; 0x01
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <STEPPER_vRotateCCW+0x338>
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(A_f64Speed);
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_BLUE_T,   DIO_HIGH);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_PINK_T,   DIO_LOW);
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	61 e0       	ldi	r22, 0x01	; 1
    2962:	40 e0       	ldi	r20, 0x00	; 0
    2964:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_YELLOW_T, DIO_LOW);
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	63 e0       	ldi	r22, 0x03	; 3
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_ORANGE_T, DIO_LOW);
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	62 e0       	ldi	r22, 0x02	; 2
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>

}
    297c:	ae 96       	adiw	r28, 0x2e	; 46
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <STEPPER_vStop>:
void STEPPER_vStop(void)
{
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_BLUE_T,   DIO_LOW);
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_PINK_T,   DIO_LOW);
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	61 e0       	ldi	r22, 0x01	; 1
    29a4:	40 e0       	ldi	r20, 0x00	; 0
    29a6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_YELLOW_T, DIO_LOW);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	63 e0       	ldi	r22, 0x03	; 3
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STEPPET_PORT, STEPPER_ORANGE_T, DIO_LOW);
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	62 e0       	ldi	r22, 0x02	; 2
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
}
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <HSSD_vInit>:
		0b01101111    // 9

};

void HSSD_vInit(void)
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDir(SSD_PORT,DIO_PORT_OUTPUT);
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	6f ef       	ldi	r22, 0xFF	; 255
    29d0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <MDIO_vSetPortDir>
}
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <HSSD_vDisplayNumber>:
void HSSD_vDisplayNumber(u8 A_u8Num)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	0f 92       	push	r0
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8Num < 10 && A_u8Num >= 0)
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	8a 30       	cpi	r24, 0x0A	; 10
    29ea:	68 f4       	brcc	.+26     	; 0x2a06 <HSSD_vDisplayNumber+0x2c>
	{
#if SSD_TYPE == SSD_COM_CATHODE
	MDIO_vSetPortVal(SSD_PORT, Sevensegment[A_u8Num]);
#elif SSD_TYPE == SSD_COM_ANODE
	MDIO_vSetPortVal(SSD_PORT, ~Sevensegment[A_u8Num]);
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	88 2f       	mov	r24, r24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	fc 01       	movw	r30, r24
    29f4:	e8 59       	subi	r30, 0x98	; 152
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	98 2f       	mov	r25, r24
    29fc:	90 95       	com	r25
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	69 2f       	mov	r22, r25
    2a02:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <MDIO_vSetPortVal>
#endif
	}
}
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <HSSD_vTurnOff>:

void HSSD_vTurnOff(void)
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
#if SSD_TYPE == SSD_COM_CATHODE
	MDIO_vSetPortVal(SSD_PORT, 0x00);
#elif SSD_TYPE == SSD_COM_ANODE
	MDIO_vSetPortVal(SSD_PORT, 0xFF);
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	6f ef       	ldi	r22, 0xFF	; 255
    2a1a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <MDIO_vSetPortVal>
#endif
}
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <HLCD_vInit>:

#include "../../MCAL/DIO/DIO_int.h"
#include "LCD_int.h"

void HLCD_vInit(void)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	e8 97       	sbiw	r28, 0x38	; 56
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
	/* Initialize pins direction */
	MDIO_vSetPinDir(LCD_CTRL_PORT, LCD_RS, DIO_OUTPUT);
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT, LCD_RW, DIO_OUTPUT);
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	41 e0       	ldi	r20, 0x01	; 1
    2a48:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT, LCD_E, DIO_OUTPUT);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	62 e0       	ldi	r22, 0x02	; 2
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	MDIO_vSetPortDir(LCD_DATA_PORT, DIO_PORT_OUTPUT);
    2a56:	83 e0       	ldi	r24, 0x03	; 3
    2a58:	6f ef       	ldi	r22, 0xFF	; 255
    2a5a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <MDIO_vSetPortDir>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a8 e4       	ldi	r26, 0x48	; 72
    2a64:	b2 e4       	ldi	r27, 0x42	; 66
    2a66:	8d ab       	std	Y+53, r24	; 0x35
    2a68:	9e ab       	std	Y+54, r25	; 0x36
    2a6a:	af ab       	std	Y+55, r26	; 0x37
    2a6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a70:	7e a9       	ldd	r23, Y+54	; 0x36
    2a72:	8f a9       	ldd	r24, Y+55	; 0x37
    2a74:	98 ad       	ldd	r25, Y+56	; 0x38
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a ef       	ldi	r20, 0xFA	; 250
    2a7c:	54 e4       	ldi	r21, 0x44	; 68
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	89 ab       	std	Y+49, r24	; 0x31
    2a88:	9a ab       	std	Y+50, r25	; 0x32
    2a8a:	ab ab       	std	Y+51, r26	; 0x33
    2a8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a8e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a90:	7a a9       	ldd	r23, Y+50	; 0x32
    2a92:	8b a9       	ldd	r24, Y+51	; 0x33
    2a94:	9c a9       	ldd	r25, Y+52	; 0x34
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <HLCD_vInit+0x8c>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	98 ab       	std	Y+48, r25	; 0x30
    2aac:	8f a7       	std	Y+47, r24	; 0x2f
    2aae:	3f c0       	rjmp	.+126    	; 0x2b2e <HLCD_vInit+0x10a>
	else if (__tmp > 65535)
    2ab0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ab6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	57 e4       	ldi	r21, 0x47	; 71
    2ac0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	4c f5       	brge	.+82     	; 0x2b1a <HLCD_vInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac8:	6d a9       	ldd	r22, Y+53	; 0x35
    2aca:	7e a9       	ldd	r23, Y+54	; 0x36
    2acc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ace:	98 ad       	ldd	r25, Y+56	; 0x38
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e2       	ldi	r20, 0x20	; 32
    2ad6:	51 e4       	ldi	r21, 0x41	; 65
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	98 ab       	std	Y+48, r25	; 0x30
    2aee:	8f a7       	std	Y+47, r24	; 0x2f
    2af0:	0f c0       	rjmp	.+30     	; 0x2b10 <HLCD_vInit+0xec>
    2af2:	88 ec       	ldi	r24, 0xC8	; 200
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9e a7       	std	Y+46, r25	; 0x2e
    2af8:	8d a7       	std	Y+45, r24	; 0x2d
    2afa:	8d a5       	ldd	r24, Y+45	; 0x2d
    2afc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <HLCD_vInit+0xda>
    2b02:	9e a7       	std	Y+46, r25	; 0x2e
    2b04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b08:	98 a9       	ldd	r25, Y+48	; 0x30
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	98 ab       	std	Y+48, r25	; 0x30
    2b0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b12:	98 a9       	ldd	r25, Y+48	; 0x30
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	69 f7       	brne	.-38     	; 0x2af2 <HLCD_vInit+0xce>
    2b18:	14 c0       	rjmp	.+40     	; 0x2b42 <HLCD_vInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b20:	9c a9       	ldd	r25, Y+52	; 0x34
    2b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	98 ab       	std	Y+48, r25	; 0x30
    2b2c:	8f a7       	std	Y+47, r24	; 0x2f
    2b2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b30:	98 a9       	ldd	r25, Y+48	; 0x30
    2b32:	9c a7       	std	Y+44, r25	; 0x2c
    2b34:	8b a7       	std	Y+43, r24	; 0x2b
    2b36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b38:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <HLCD_vInit+0x116>
    2b3e:	9c a7       	std	Y+44, r25	; 0x2c
    2b40:	8b a7       	std	Y+43, r24	; 0x2b

	/* 8-bit initialization sequence*/
	_delay_ms(50);
	HLCD_vSendCmd(0x38);  	// send function set instruction
    2b42:	88 e3       	ldi	r24, 0x38	; 56
    2b44:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <HLCD_vSendCmd>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e8       	ldi	r26, 0x80	; 128
    2b4e:	bf e3       	ldi	r27, 0x3F	; 63
    2b50:	8f a3       	std	Y+39, r24	; 0x27
    2b52:	98 a7       	std	Y+40, r25	; 0x28
    2b54:	a9 a7       	std	Y+41, r26	; 0x29
    2b56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b58:	6f a1       	ldd	r22, Y+39	; 0x27
    2b5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a ef       	ldi	r20, 0xFA	; 250
    2b66:	54 e4       	ldi	r21, 0x44	; 68
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	8b a3       	std	Y+35, r24	; 0x23
    2b72:	9c a3       	std	Y+36, r25	; 0x24
    2b74:	ad a3       	std	Y+37, r26	; 0x25
    2b76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b78:	6b a1       	ldd	r22, Y+35	; 0x23
    2b7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <HLCD_vInit+0x176>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9a a3       	std	Y+34, r25	; 0x22
    2b96:	89 a3       	std	Y+33, r24	; 0x21
    2b98:	3f c0       	rjmp	.+126    	; 0x2c18 <HLCD_vInit+0x1f4>
	else if (__tmp > 65535)
    2b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	3f ef       	ldi	r19, 0xFF	; 255
    2ba6:	4f e7       	ldi	r20, 0x7F	; 127
    2ba8:	57 e4       	ldi	r21, 0x47	; 71
    2baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bae:	18 16       	cp	r1, r24
    2bb0:	4c f5       	brge	.+82     	; 0x2c04 <HLCD_vInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb2:	6f a1       	ldd	r22, Y+39	; 0x27
    2bb4:	78 a5       	ldd	r23, Y+40	; 0x28
    2bb6:	89 a5       	ldd	r24, Y+41	; 0x29
    2bb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	9a a3       	std	Y+34, r25	; 0x22
    2bd8:	89 a3       	std	Y+33, r24	; 0x21
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <HLCD_vInit+0x1d6>
    2bdc:	88 ec       	ldi	r24, 0xC8	; 200
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	98 a3       	std	Y+32, r25	; 0x20
    2be2:	8f 8f       	std	Y+31, r24	; 0x1f
    2be4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be6:	98 a1       	ldd	r25, Y+32	; 0x20
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <HLCD_vInit+0x1c4>
    2bec:	98 a3       	std	Y+32, r25	; 0x20
    2bee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9a a3       	std	Y+34, r25	; 0x22
    2bf8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <HLCD_vInit+0x1b8>
    2c02:	14 c0       	rjmp	.+40     	; 0x2c2c <HLCD_vInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c04:	6b a1       	ldd	r22, Y+35	; 0x23
    2c06:	7c a1       	ldd	r23, Y+36	; 0x24
    2c08:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	9a a3       	std	Y+34, r25	; 0x22
    2c16:	89 a3       	std	Y+33, r24	; 0x21
    2c18:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c1e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <HLCD_vInit+0x200>
    2c28:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_vSendCmd(0x0C);	// send display on/off instruction
    2c2c:	8c e0       	ldi	r24, 0x0C	; 12
    2c2e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <HLCD_vSendCmd>
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	a0 e8       	ldi	r26, 0x80	; 128
    2c38:	bf e3       	ldi	r27, 0x3F	; 63
    2c3a:	89 8f       	std	Y+25, r24	; 0x19
    2c3c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c3e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c42:	69 8d       	ldd	r22, Y+25	; 0x19
    2c44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	4a ef       	ldi	r20, 0xFA	; 250
    2c50:	54 e4       	ldi	r21, 0x44	; 68
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	8d 8b       	std	Y+21, r24	; 0x15
    2c5c:	9e 8b       	std	Y+22, r25	; 0x16
    2c5e:	af 8b       	std	Y+23, r26	; 0x17
    2c60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c62:	6d 89       	ldd	r22, Y+21	; 0x15
    2c64:	7e 89       	ldd	r23, Y+22	; 0x16
    2c66:	8f 89       	ldd	r24, Y+23	; 0x17
    2c68:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e8       	ldi	r20, 0x80	; 128
    2c70:	5f e3       	ldi	r21, 0x3F	; 63
    2c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c76:	88 23       	and	r24, r24
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <HLCD_vInit+0x260>
		__ticks = 1;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	9c 8b       	std	Y+20, r25	; 0x14
    2c80:	8b 8b       	std	Y+19, r24	; 0x13
    2c82:	3f c0       	rjmp	.+126    	; 0x2d02 <HLCD_vInit+0x2de>
	else if (__tmp > 65535)
    2c84:	6d 89       	ldd	r22, Y+21	; 0x15
    2c86:	7e 89       	ldd	r23, Y+22	; 0x16
    2c88:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	3f ef       	ldi	r19, 0xFF	; 255
    2c90:	4f e7       	ldi	r20, 0x7F	; 127
    2c92:	57 e4       	ldi	r21, 0x47	; 71
    2c94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c98:	18 16       	cp	r1, r24
    2c9a:	4c f5       	brge	.+82     	; 0x2cee <HLCD_vInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e2       	ldi	r20, 0x20	; 32
    2caa:	51 e4       	ldi	r21, 0x41	; 65
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9c 8b       	std	Y+20, r25	; 0x14
    2cc2:	8b 8b       	std	Y+19, r24	; 0x13
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <HLCD_vInit+0x2c0>
    2cc6:	88 ec       	ldi	r24, 0xC8	; 200
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9a 8b       	std	Y+18, r25	; 0x12
    2ccc:	89 8b       	std	Y+17, r24	; 0x11
    2cce:	89 89       	ldd	r24, Y+17	; 0x11
    2cd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <HLCD_vInit+0x2ae>
    2cd6:	9a 8b       	std	Y+18, r25	; 0x12
    2cd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	8b 89       	ldd	r24, Y+19	; 0x13
    2cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	9c 8b       	std	Y+20, r25	; 0x14
    2ce2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	69 f7       	brne	.-38     	; 0x2cc6 <HLCD_vInit+0x2a2>
    2cec:	14 c0       	rjmp	.+40     	; 0x2d16 <HLCD_vInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cee:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	9c 8b       	std	Y+20, r25	; 0x14
    2d00:	8b 8b       	std	Y+19, r24	; 0x13
    2d02:	8b 89       	ldd	r24, Y+19	; 0x13
    2d04:	9c 89       	ldd	r25, Y+20	; 0x14
    2d06:	98 8b       	std	Y+16, r25	; 0x10
    2d08:	8f 87       	std	Y+15, r24	; 0x0f
    2d0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d0c:	98 89       	ldd	r25, Y+16	; 0x10
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <HLCD_vInit+0x2ea>
    2d12:	98 8b       	std	Y+16, r25	; 0x10
    2d14:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_vSendCmd(0x01);	// send clear instruction
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <HLCD_vSendCmd>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	a0 e0       	ldi	r26, 0x00	; 0
    2d22:	b0 e4       	ldi	r27, 0x40	; 64
    2d24:	8b 87       	std	Y+11, r24	; 0x0b
    2d26:	9c 87       	std	Y+12, r25	; 0x0c
    2d28:	ad 87       	std	Y+13, r26	; 0x0d
    2d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	4a ef       	ldi	r20, 0xFA	; 250
    2d3a:	54 e4       	ldi	r21, 0x44	; 68
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	8f 83       	std	Y+7, r24	; 0x07
    2d46:	98 87       	std	Y+8, r25	; 0x08
    2d48:	a9 87       	std	Y+9, r26	; 0x09
    2d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4e:	78 85       	ldd	r23, Y+8	; 0x08
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5f e3       	ldi	r21, 0x3F	; 63
    2d5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d60:	88 23       	and	r24, r24
    2d62:	2c f4       	brge	.+10     	; 0x2d6e <HLCD_vInit+0x34a>
		__ticks = 1;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
    2d6c:	3f c0       	rjmp	.+126    	; 0x2dec <HLCD_vInit+0x3c8>
	else if (__tmp > 65535)
    2d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d70:	78 85       	ldd	r23, Y+8	; 0x08
    2d72:	89 85       	ldd	r24, Y+9	; 0x09
    2d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	3f ef       	ldi	r19, 0xFF	; 255
    2d7a:	4f e7       	ldi	r20, 0x7F	; 127
    2d7c:	57 e4       	ldi	r21, 0x47	; 71
    2d7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d82:	18 16       	cp	r1, r24
    2d84:	4c f5       	brge	.+82     	; 0x2dd8 <HLCD_vInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e2       	ldi	r20, 0x20	; 32
    2d94:	51 e4       	ldi	r21, 0x41	; 65
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	0f c0       	rjmp	.+30     	; 0x2dce <HLCD_vInit+0x3aa>
    2db0:	88 ec       	ldi	r24, 0xC8	; 200
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	8b 83       	std	Y+3, r24	; 0x03
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <HLCD_vInit+0x398>
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	69 f7       	brne	.-38     	; 0x2db0 <HLCD_vInit+0x38c>
    2dd6:	14 c0       	rjmp	.+40     	; 0x2e00 <HLCD_vInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dda:	78 85       	ldd	r23, Y+8	; 0x08
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <HLCD_vInit+0x3d4>
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_vSendCmd(0x06);	// send entry mode set instruction
    2e00:	86 e0       	ldi	r24, 0x06	; 6
    2e02:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <HLCD_vSendCmd>

}
    2e06:	e8 96       	adiw	r28, 0x38	; 56
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	f8 94       	cli
    2e0c:	de bf       	out	0x3e, r29	; 62
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	cd bf       	out	0x3d, r28	; 61
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	08 95       	ret

00002e18 <HLCD_vSendCmd>:
void HLCD_vSendCmd(u8 A_u8cmd)
{
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	6d 97       	sbiw	r28, 0x1d	; 29
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Control RS to Send Command */
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RS, DIO_LOW);
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>

	/* Reset RW to Enable Writing */
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RW, DIO_LOW);
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>

	/* Write instruction */
	MDIO_vSetPortVal(LCD_DATA_PORT, A_u8cmd);
    2e42:	83 e0       	ldi	r24, 0x03	; 3
    2e44:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2e46:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <MDIO_vSetPortVal>

	/* Pulse on Enable */
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_E, DIO_HIGH);
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	62 e0       	ldi	r22, 0x02	; 2
    2e4e:	41 e0       	ldi	r20, 0x01	; 1
    2e50:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	a0 e8       	ldi	r26, 0x80	; 128
    2e5a:	bf e3       	ldi	r27, 0x3F	; 63
    2e5c:	89 8f       	std	Y+25, r24	; 0x19
    2e5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e60:	ab 8f       	std	Y+27, r26	; 0x1b
    2e62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e64:	69 8d       	ldd	r22, Y+25	; 0x19
    2e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	4a ef       	ldi	r20, 0xFA	; 250
    2e72:	54 e4       	ldi	r21, 0x44	; 68
    2e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	8d 8b       	std	Y+21, r24	; 0x15
    2e7e:	9e 8b       	std	Y+22, r25	; 0x16
    2e80:	af 8b       	std	Y+23, r26	; 0x17
    2e82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e84:	6d 89       	ldd	r22, Y+21	; 0x15
    2e86:	7e 89       	ldd	r23, Y+22	; 0x16
    2e88:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 e8       	ldi	r20, 0x80	; 128
    2e92:	5f e3       	ldi	r21, 0x3F	; 63
    2e94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e98:	88 23       	and	r24, r24
    2e9a:	2c f4       	brge	.+10     	; 0x2ea6 <HLCD_vSendCmd+0x8e>
		__ticks = 1;
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	9c 8b       	std	Y+20, r25	; 0x14
    2ea2:	8b 8b       	std	Y+19, r24	; 0x13
    2ea4:	3f c0       	rjmp	.+126    	; 0x2f24 <HLCD_vSendCmd+0x10c>
	else if (__tmp > 65535)
    2ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2eac:	98 8d       	ldd	r25, Y+24	; 0x18
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	3f ef       	ldi	r19, 0xFF	; 255
    2eb2:	4f e7       	ldi	r20, 0x7F	; 127
    2eb4:	57 e4       	ldi	r21, 0x47	; 71
    2eb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eba:	18 16       	cp	r1, r24
    2ebc:	4c f5       	brge	.+82     	; 0x2f10 <HLCD_vSendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebe:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	40 e2       	ldi	r20, 0x20	; 32
    2ecc:	51 e4       	ldi	r21, 0x41	; 65
    2ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	9c 8b       	std	Y+20, r25	; 0x14
    2ee4:	8b 8b       	std	Y+19, r24	; 0x13
    2ee6:	0f c0       	rjmp	.+30     	; 0x2f06 <HLCD_vSendCmd+0xee>
    2ee8:	88 ec       	ldi	r24, 0xC8	; 200
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	9a 8b       	std	Y+18, r25	; 0x12
    2eee:	89 8b       	std	Y+17, r24	; 0x11
    2ef0:	89 89       	ldd	r24, Y+17	; 0x11
    2ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <HLCD_vSendCmd+0xdc>
    2ef8:	9a 8b       	std	Y+18, r25	; 0x12
    2efa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efc:	8b 89       	ldd	r24, Y+19	; 0x13
    2efe:	9c 89       	ldd	r25, Y+20	; 0x14
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	9c 8b       	std	Y+20, r25	; 0x14
    2f04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f06:	8b 89       	ldd	r24, Y+19	; 0x13
    2f08:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	69 f7       	brne	.-38     	; 0x2ee8 <HLCD_vSendCmd+0xd0>
    2f0e:	14 c0       	rjmp	.+40     	; 0x2f38 <HLCD_vSendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f10:	6d 89       	ldd	r22, Y+21	; 0x15
    2f12:	7e 89       	ldd	r23, Y+22	; 0x16
    2f14:	8f 89       	ldd	r24, Y+23	; 0x17
    2f16:	98 8d       	ldd	r25, Y+24	; 0x18
    2f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	9c 8b       	std	Y+20, r25	; 0x14
    2f22:	8b 8b       	std	Y+19, r24	; 0x13
    2f24:	8b 89       	ldd	r24, Y+19	; 0x13
    2f26:	9c 89       	ldd	r25, Y+20	; 0x14
    2f28:	98 8b       	std	Y+16, r25	; 0x10
    2f2a:	8f 87       	std	Y+15, r24	; 0x0f
    2f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2e:	98 89       	ldd	r25, Y+16	; 0x10
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <HLCD_vSendCmd+0x118>
    2f34:	98 8b       	std	Y+16, r25	; 0x10
    2f36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_E, DIO_LOW);
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	62 e0       	ldi	r22, 0x02	; 2
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	a0 e8       	ldi	r26, 0x80	; 128
    2f48:	bf e3       	ldi	r27, 0x3F	; 63
    2f4a:	8b 87       	std	Y+11, r24	; 0x0b
    2f4c:	9c 87       	std	Y+12, r25	; 0x0c
    2f4e:	ad 87       	std	Y+13, r26	; 0x0d
    2f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	4a ef       	ldi	r20, 0xFA	; 250
    2f60:	54 e4       	ldi	r21, 0x44	; 68
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	8f 83       	std	Y+7, r24	; 0x07
    2f6c:	98 87       	std	Y+8, r25	; 0x08
    2f6e:	a9 87       	std	Y+9, r26	; 0x09
    2f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f72:	6f 81       	ldd	r22, Y+7	; 0x07
    2f74:	78 85       	ldd	r23, Y+8	; 0x08
    2f76:	89 85       	ldd	r24, Y+9	; 0x09
    2f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e8       	ldi	r20, 0x80	; 128
    2f80:	5f e3       	ldi	r21, 0x3F	; 63
    2f82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f86:	88 23       	and	r24, r24
    2f88:	2c f4       	brge	.+10     	; 0x2f94 <HLCD_vSendCmd+0x17c>
		__ticks = 1;
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	9e 83       	std	Y+6, r25	; 0x06
    2f90:	8d 83       	std	Y+5, r24	; 0x05
    2f92:	3f c0       	rjmp	.+126    	; 0x3012 <HLCD_vSendCmd+0x1fa>
	else if (__tmp > 65535)
    2f94:	6f 81       	ldd	r22, Y+7	; 0x07
    2f96:	78 85       	ldd	r23, Y+8	; 0x08
    2f98:	89 85       	ldd	r24, Y+9	; 0x09
    2f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	3f ef       	ldi	r19, 0xFF	; 255
    2fa0:	4f e7       	ldi	r20, 0x7F	; 127
    2fa2:	57 e4       	ldi	r21, 0x47	; 71
    2fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa8:	18 16       	cp	r1, r24
    2faa:	4c f5       	brge	.+82     	; 0x2ffe <HLCD_vSendCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e2       	ldi	r20, 0x20	; 32
    2fba:	51 e4       	ldi	r21, 0x41	; 65
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9e 83       	std	Y+6, r25	; 0x06
    2fd2:	8d 83       	std	Y+5, r24	; 0x05
    2fd4:	0f c0       	rjmp	.+30     	; 0x2ff4 <HLCD_vSendCmd+0x1dc>
    2fd6:	88 ec       	ldi	r24, 0xC8	; 200
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9c 83       	std	Y+4, r25	; 0x04
    2fdc:	8b 83       	std	Y+3, r24	; 0x03
    2fde:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <HLCD_vSendCmd+0x1ca>
    2fe6:	9c 83       	std	Y+4, r25	; 0x04
    2fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	00 97       	sbiw	r24, 0x00	; 0
    2ffa:	69 f7       	brne	.-38     	; 0x2fd6 <HLCD_vSendCmd+0x1be>
    2ffc:	14 c0       	rjmp	.+40     	; 0x3026 <HLCD_vSendCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    3000:	78 85       	ldd	r23, Y+8	; 0x08
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
    3012:	8d 81       	ldd	r24, Y+5	; 0x05
    3014:	9e 81       	ldd	r25, Y+6	; 0x06
    3016:	9a 83       	std	Y+2, r25	; 0x02
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	f1 f7       	brne	.-4      	; 0x301e <HLCD_vSendCmd+0x206>
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3026:	6d 96       	adiw	r28, 0x1d	; 29
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <HLCD_vSendChar>:
void HLCD_vSendChar(u8 A_u8Char)
{
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	6d 97       	sbiw	r28, 0x1d	; 29
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Control RS to Send Data */
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RS, DIO_HIGH);
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	60 e0       	ldi	r22, 0x00	; 0
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>

	/* Reset RW to Enable Writing */
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RW, DIO_LOW);
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	61 e0       	ldi	r22, 0x01	; 1
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>

	/* Write instruction */
	MDIO_vSetPortVal(LCD_DATA_PORT, A_u8Char);
    3062:	83 e0       	ldi	r24, 0x03	; 3
    3064:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3066:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <MDIO_vSetPortVal>

	/* Pulse on Enable */
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_E, DIO_HIGH);
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	62 e0       	ldi	r22, 0x02	; 2
    306e:	41 e0       	ldi	r20, 0x01	; 1
    3070:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a0 e8       	ldi	r26, 0x80	; 128
    307a:	bf e3       	ldi	r27, 0x3F	; 63
    307c:	89 8f       	std	Y+25, r24	; 0x19
    307e:	9a 8f       	std	Y+26, r25	; 0x1a
    3080:	ab 8f       	std	Y+27, r26	; 0x1b
    3082:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3084:	69 8d       	ldd	r22, Y+25	; 0x19
    3086:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    308a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	4a ef       	ldi	r20, 0xFA	; 250
    3092:	54 e4       	ldi	r21, 0x44	; 68
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	8d 8b       	std	Y+21, r24	; 0x15
    309e:	9e 8b       	std	Y+22, r25	; 0x16
    30a0:	af 8b       	std	Y+23, r26	; 0x17
    30a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30a4:	6d 89       	ldd	r22, Y+21	; 0x15
    30a6:	7e 89       	ldd	r23, Y+22	; 0x16
    30a8:	8f 89       	ldd	r24, Y+23	; 0x17
    30aa:	98 8d       	ldd	r25, Y+24	; 0x18
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e8       	ldi	r20, 0x80	; 128
    30b2:	5f e3       	ldi	r21, 0x3F	; 63
    30b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b8:	88 23       	and	r24, r24
    30ba:	2c f4       	brge	.+10     	; 0x30c6 <HLCD_vSendChar+0x8e>
		__ticks = 1;
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	9c 8b       	std	Y+20, r25	; 0x14
    30c2:	8b 8b       	std	Y+19, r24	; 0x13
    30c4:	3f c0       	rjmp	.+126    	; 0x3144 <HLCD_vSendChar+0x10c>
	else if (__tmp > 65535)
    30c6:	6d 89       	ldd	r22, Y+21	; 0x15
    30c8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ca:	8f 89       	ldd	r24, Y+23	; 0x17
    30cc:	98 8d       	ldd	r25, Y+24	; 0x18
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	3f ef       	ldi	r19, 0xFF	; 255
    30d2:	4f e7       	ldi	r20, 0x7F	; 127
    30d4:	57 e4       	ldi	r21, 0x47	; 71
    30d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30da:	18 16       	cp	r1, r24
    30dc:	4c f5       	brge	.+82     	; 0x3130 <HLCD_vSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30de:	69 8d       	ldd	r22, Y+25	; 0x19
    30e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e2       	ldi	r20, 0x20	; 32
    30ec:	51 e4       	ldi	r21, 0x41	; 65
    30ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	9c 8b       	std	Y+20, r25	; 0x14
    3104:	8b 8b       	std	Y+19, r24	; 0x13
    3106:	0f c0       	rjmp	.+30     	; 0x3126 <HLCD_vSendChar+0xee>
    3108:	88 ec       	ldi	r24, 0xC8	; 200
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	9a 8b       	std	Y+18, r25	; 0x12
    310e:	89 8b       	std	Y+17, r24	; 0x11
    3110:	89 89       	ldd	r24, Y+17	; 0x11
    3112:	9a 89       	ldd	r25, Y+18	; 0x12
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <HLCD_vSendChar+0xdc>
    3118:	9a 8b       	std	Y+18, r25	; 0x12
    311a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311c:	8b 89       	ldd	r24, Y+19	; 0x13
    311e:	9c 89       	ldd	r25, Y+20	; 0x14
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	9c 8b       	std	Y+20, r25	; 0x14
    3124:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3126:	8b 89       	ldd	r24, Y+19	; 0x13
    3128:	9c 89       	ldd	r25, Y+20	; 0x14
    312a:	00 97       	sbiw	r24, 0x00	; 0
    312c:	69 f7       	brne	.-38     	; 0x3108 <HLCD_vSendChar+0xd0>
    312e:	14 c0       	rjmp	.+40     	; 0x3158 <HLCD_vSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3130:	6d 89       	ldd	r22, Y+21	; 0x15
    3132:	7e 89       	ldd	r23, Y+22	; 0x16
    3134:	8f 89       	ldd	r24, Y+23	; 0x17
    3136:	98 8d       	ldd	r25, Y+24	; 0x18
    3138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	9c 8b       	std	Y+20, r25	; 0x14
    3142:	8b 8b       	std	Y+19, r24	; 0x13
    3144:	8b 89       	ldd	r24, Y+19	; 0x13
    3146:	9c 89       	ldd	r25, Y+20	; 0x14
    3148:	98 8b       	std	Y+16, r25	; 0x10
    314a:	8f 87       	std	Y+15, r24	; 0x0f
    314c:	8f 85       	ldd	r24, Y+15	; 0x0f
    314e:	98 89       	ldd	r25, Y+16	; 0x10
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <HLCD_vSendChar+0x118>
    3154:	98 8b       	std	Y+16, r25	; 0x10
    3156:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_E, DIO_LOW);
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	62 e0       	ldi	r22, 0x02	; 2
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	a0 e8       	ldi	r26, 0x80	; 128
    3168:	bf e3       	ldi	r27, 0x3F	; 63
    316a:	8b 87       	std	Y+11, r24	; 0x0b
    316c:	9c 87       	std	Y+12, r25	; 0x0c
    316e:	ad 87       	std	Y+13, r26	; 0x0d
    3170:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3172:	6b 85       	ldd	r22, Y+11	; 0x0b
    3174:	7c 85       	ldd	r23, Y+12	; 0x0c
    3176:	8d 85       	ldd	r24, Y+13	; 0x0d
    3178:	9e 85       	ldd	r25, Y+14	; 0x0e
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	4a ef       	ldi	r20, 0xFA	; 250
    3180:	54 e4       	ldi	r21, 0x44	; 68
    3182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	8f 83       	std	Y+7, r24	; 0x07
    318c:	98 87       	std	Y+8, r25	; 0x08
    318e:	a9 87       	std	Y+9, r26	; 0x09
    3190:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3192:	6f 81       	ldd	r22, Y+7	; 0x07
    3194:	78 85       	ldd	r23, Y+8	; 0x08
    3196:	89 85       	ldd	r24, Y+9	; 0x09
    3198:	9a 85       	ldd	r25, Y+10	; 0x0a
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	2c f4       	brge	.+10     	; 0x31b4 <HLCD_vSendChar+0x17c>
		__ticks = 1;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9e 83       	std	Y+6, r25	; 0x06
    31b0:	8d 83       	std	Y+5, r24	; 0x05
    31b2:	3f c0       	rjmp	.+126    	; 0x3232 <HLCD_vSendChar+0x1fa>
	else if (__tmp > 65535)
    31b4:	6f 81       	ldd	r22, Y+7	; 0x07
    31b6:	78 85       	ldd	r23, Y+8	; 0x08
    31b8:	89 85       	ldd	r24, Y+9	; 0x09
    31ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	57 e4       	ldi	r21, 0x47	; 71
    31c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	4c f5       	brge	.+82     	; 0x321e <HLCD_vSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e2       	ldi	r20, 0x20	; 32
    31da:	51 e4       	ldi	r21, 0x41	; 65
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
    31f4:	0f c0       	rjmp	.+30     	; 0x3214 <HLCD_vSendChar+0x1dc>
    31f6:	88 ec       	ldi	r24, 0xC8	; 200
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	9c 83       	std	Y+4, r25	; 0x04
    31fc:	8b 83       	std	Y+3, r24	; 0x03
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	9c 81       	ldd	r25, Y+4	; 0x04
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <HLCD_vSendChar+0x1ca>
    3206:	9c 83       	std	Y+4, r25	; 0x04
    3208:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	9e 81       	ldd	r25, Y+6	; 0x06
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	69 f7       	brne	.-38     	; 0x31f6 <HLCD_vSendChar+0x1be>
    321c:	14 c0       	rjmp	.+40     	; 0x3246 <HLCD_vSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321e:	6f 81       	ldd	r22, Y+7	; 0x07
    3220:	78 85       	ldd	r23, Y+8	; 0x08
    3222:	89 85       	ldd	r24, Y+9	; 0x09
    3224:	9a 85       	ldd	r25, Y+10	; 0x0a
    3226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	9e 83       	std	Y+6, r25	; 0x06
    3230:	8d 83       	std	Y+5, r24	; 0x05
    3232:	8d 81       	ldd	r24, Y+5	; 0x05
    3234:	9e 81       	ldd	r25, Y+6	; 0x06
    3236:	9a 83       	std	Y+2, r25	; 0x02
    3238:	89 83       	std	Y+1, r24	; 0x01
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	9a 81       	ldd	r25, Y+2	; 0x02
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <HLCD_vSendChar+0x206>
    3242:	9a 83       	std	Y+2, r25	; 0x02
    3244:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3246:	6d 96       	adiw	r28, 0x1d	; 29
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <HLCD_vDisplayString>:

void HLCD_vDisplayString(s8 A_s8Str[])
{
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	00 d0       	rcall	.+0      	; 0x325e <HLCD_vDisplayString+0x6>
    325e:	0f 92       	push	r0
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	9b 83       	std	Y+3, r25	; 0x03
    3266:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 L_u8index=0 ;A_s8Str[L_u8index] != '\0'; L_u8index++)
    3268:	19 82       	std	Y+1, r1	; 0x01
    326a:	0e c0       	rjmp	.+28     	; 0x3288 <HLCD_vDisplayString+0x30>
	{
		HLCD_vSendChar(A_s8Str[L_u8index]);
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	28 2f       	mov	r18, r24
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	9b 81       	ldd	r25, Y+3	; 0x03
    3276:	fc 01       	movw	r30, r24
    3278:	e2 0f       	add	r30, r18
    327a:	f3 1f       	adc	r31, r19
    327c:	80 81       	ld	r24, Z
    327e:	0e 94 1c 18 	call	0x3038	; 0x3038 <HLCD_vSendChar>
	_delay_ms(1);
}

void HLCD_vDisplayString(s8 A_s8Str[])
{
	for(u8 L_u8index=0 ;A_s8Str[L_u8index] != '\0'; L_u8index++)
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	8f 5f       	subi	r24, 0xFF	; 255
    3286:	89 83       	std	Y+1, r24	; 0x01
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	9b 81       	ldd	r25, Y+3	; 0x03
    3292:	fc 01       	movw	r30, r24
    3294:	e2 0f       	add	r30, r18
    3296:	f3 1f       	adc	r31, r19
    3298:	80 81       	ld	r24, Z
    329a:	88 23       	and	r24, r24
    329c:	39 f7       	brne	.-50     	; 0x326c <HLCD_vDisplayString+0x14>
	{
		HLCD_vSendChar(A_s8Str[L_u8index]);
	}
}
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	08 95       	ret

000032aa <HLCD_vPrintNumber>:
void HLCD_vPrintNumber(s32 A_s32Number)
{
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	60 97       	sbiw	r28, 0x10	; 16
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	de bf       	out	0x3e, r29	; 62
    32be:	0f be       	out	0x3f, r0	; 63
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	6d 87       	std	Y+13, r22	; 0x0d
    32c4:	7e 87       	std	Y+14, r23	; 0x0e
    32c6:	8f 87       	std	Y+15, r24	; 0x0f
    32c8:	98 8b       	std	Y+16, r25	; 0x10
	u8 L_u8index = 0;
    32ca:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_u8digits[10] = {0};
    32cc:	8a e0       	ldi	r24, 0x0A	; 10
    32ce:	fe 01       	movw	r30, r28
    32d0:	33 96       	adiw	r30, 0x03	; 3
    32d2:	df 01       	movw	r26, r30
    32d4:	98 2f       	mov	r25, r24
    32d6:	1d 92       	st	X+, r1
    32d8:	9a 95       	dec	r25
    32da:	e9 f7       	brne	.-6      	; 0x32d6 <HLCD_vPrintNumber+0x2c>
    32dc:	2e c0       	rjmp	.+92     	; 0x333a <HLCD_vPrintNumber+0x90>

	/* Extract digits */
	while(A_s32Number > 0)
	{
		L_u8digits[L_u8index] = A_s32Number%10 + '0';
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	08 2f       	mov	r16, r24
    32e2:	10 e0       	ldi	r17, 0x00	; 0
    32e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e8:	af 85       	ldd	r26, Y+15	; 0x0f
    32ea:	b8 89       	ldd	r27, Y+16	; 0x10
    32ec:	2a e0       	ldi	r18, 0x0A	; 10
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e0       	ldi	r20, 0x00	; 0
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	bc 01       	movw	r22, r24
    32f6:	cd 01       	movw	r24, r26
    32f8:	0e 94 13 1b 	call	0x3626	; 0x3626 <__divmodsi4>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	28 2f       	mov	r18, r24
    3302:	20 5d       	subi	r18, 0xD0	; 208
    3304:	ce 01       	movw	r24, r28
    3306:	03 96       	adiw	r24, 0x03	; 3
    3308:	fc 01       	movw	r30, r24
    330a:	e0 0f       	add	r30, r16
    330c:	f1 1f       	adc	r31, r17
    330e:	20 83       	st	Z, r18
		A_s32Number/=10;
    3310:	8d 85       	ldd	r24, Y+13	; 0x0d
    3312:	9e 85       	ldd	r25, Y+14	; 0x0e
    3314:	af 85       	ldd	r26, Y+15	; 0x0f
    3316:	b8 89       	ldd	r27, Y+16	; 0x10
    3318:	2a e0       	ldi	r18, 0x0A	; 10
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e0       	ldi	r20, 0x00	; 0
    331e:	50 e0       	ldi	r21, 0x00	; 0
    3320:	bc 01       	movw	r22, r24
    3322:	cd 01       	movw	r24, r26
    3324:	0e 94 13 1b 	call	0x3626	; 0x3626 <__divmodsi4>
    3328:	da 01       	movw	r26, r20
    332a:	c9 01       	movw	r24, r18
    332c:	8d 87       	std	Y+13, r24	; 0x0d
    332e:	9e 87       	std	Y+14, r25	; 0x0e
    3330:	af 87       	std	Y+15, r26	; 0x0f
    3332:	b8 8b       	std	Y+16, r27	; 0x10
		L_u8index++;
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	8f 5f       	subi	r24, 0xFF	; 255
    3338:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 L_u8index = 0;
	u8 L_u8digits[10] = {0};

	/* Extract digits */
	while(A_s32Number > 0)
    333a:	8d 85       	ldd	r24, Y+13	; 0x0d
    333c:	9e 85       	ldd	r25, Y+14	; 0x0e
    333e:	af 85       	ldd	r26, Y+15	; 0x0f
    3340:	b8 89       	ldd	r27, Y+16	; 0x10
    3342:	18 16       	cp	r1, r24
    3344:	19 06       	cpc	r1, r25
    3346:	1a 06       	cpc	r1, r26
    3348:	1b 06       	cpc	r1, r27
    334a:	4c f2       	brlt	.-110    	; 0x32de <HLCD_vPrintNumber+0x34>
	{
		L_u8digits[L_u8index] = A_s32Number%10 + '0';
		A_s32Number/=10;
		L_u8index++;
	}
	for(s8 L_s8index = 9; L_s8index >= 0; L_s8index--)
    334c:	89 e0       	ldi	r24, 0x09	; 9
    334e:	89 83       	std	Y+1, r24	; 0x01
    3350:	1d c0       	rjmp	.+58     	; 0x338c <HLCD_vPrintNumber+0xe2>
	{
		if(L_u8digits[L_s8index] == 0) continue;
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	28 2f       	mov	r18, r24
    3356:	33 27       	eor	r19, r19
    3358:	27 fd       	sbrc	r18, 7
    335a:	30 95       	com	r19
    335c:	ce 01       	movw	r24, r28
    335e:	03 96       	adiw	r24, 0x03	; 3
    3360:	fc 01       	movw	r30, r24
    3362:	e2 0f       	add	r30, r18
    3364:	f3 1f       	adc	r31, r19
    3366:	80 81       	ld	r24, Z
    3368:	88 23       	and	r24, r24
    336a:	69 f0       	breq	.+26     	; 0x3386 <HLCD_vPrintNumber+0xdc>
		HLCD_vSendChar(L_u8digits[L_s8index]);
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	28 2f       	mov	r18, r24
    3370:	33 27       	eor	r19, r19
    3372:	27 fd       	sbrc	r18, 7
    3374:	30 95       	com	r19
    3376:	ce 01       	movw	r24, r28
    3378:	03 96       	adiw	r24, 0x03	; 3
    337a:	fc 01       	movw	r30, r24
    337c:	e2 0f       	add	r30, r18
    337e:	f3 1f       	adc	r31, r19
    3380:	80 81       	ld	r24, Z
    3382:	0e 94 1c 18 	call	0x3038	; 0x3038 <HLCD_vSendChar>
	{
		L_u8digits[L_u8index] = A_s32Number%10 + '0';
		A_s32Number/=10;
		L_u8index++;
	}
	for(s8 L_s8index = 9; L_s8index >= 0; L_s8index--)
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	81 50       	subi	r24, 0x01	; 1
    338a:	89 83       	std	Y+1, r24	; 0x01
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	88 23       	and	r24, r24
    3390:	04 f7       	brge	.-64     	; 0x3352 <HLCD_vPrintNumber+0xa8>
	{
		if(L_u8digits[L_s8index] == 0) continue;
		HLCD_vSendChar(L_u8digits[L_s8index]);
	}

}
    3392:	60 96       	adiw	r28, 0x10	; 16
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	1f 91       	pop	r17
    33a4:	0f 91       	pop	r16
    33a6:	08 95       	ret

000033a8 <HLCD_vSetCursorPosition>:
void HLCD_vSetCursorPosition(u8 A_u8Row, u8 A_u8Col)
{
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	00 d0       	rcall	.+0      	; 0x33ae <HLCD_vSetCursorPosition+0x6>
    33ae:	00 d0       	rcall	.+0      	; 0x33b0 <HLCD_vSetCursorPosition+0x8>
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Row){
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	3c 83       	std	Y+4, r19	; 0x04
    33c0:	2b 83       	std	Y+3, r18	; 0x03
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	9c 81       	ldd	r25, Y+4	; 0x04
    33c6:	00 97       	sbiw	r24, 0x00	; 0
    33c8:	31 f0       	breq	.+12     	; 0x33d6 <HLCD_vSetCursorPosition+0x2e>
    33ca:	2b 81       	ldd	r18, Y+3	; 0x03
    33cc:	3c 81       	ldd	r19, Y+4	; 0x04
    33ce:	21 30       	cpi	r18, 0x01	; 1
    33d0:	31 05       	cpc	r19, r1
    33d2:	31 f0       	breq	.+12     	; 0x33e0 <HLCD_vSetCursorPosition+0x38>
    33d4:	09 c0       	rjmp	.+18     	; 0x33e8 <HLCD_vSetCursorPosition+0x40>
	case 0:
		// DDRAM base address + col number
		HLCD_vSendCmd(DDRAM_BASE_ADDR_R0 + A_u8Col);
    33d6:	8a 81       	ldd	r24, Y+2	; 0x02
    33d8:	80 58       	subi	r24, 0x80	; 128
    33da:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <HLCD_vSendCmd>
    33de:	04 c0       	rjmp	.+8      	; 0x33e8 <HLCD_vSetCursorPosition+0x40>
		break;
	case 1:
		HLCD_vSendCmd(DDRAM_BASE_ADDR_R1 + A_u8Col);
    33e0:	8a 81       	ldd	r24, Y+2	; 0x02
    33e2:	80 54       	subi	r24, 0x40	; 64
    33e4:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <HLCD_vSendCmd>
		break;
	}
}
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	08 95       	ret

000033f6 <HLCD_vClearScreen>:

void HLCD_vClearScreen(void) {
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
	HLCD_vSendCmd(0x01);
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <HLCD_vSendCmd>
}
    3404:	cf 91       	pop	r28
    3406:	df 91       	pop	r29
    3408:	08 95       	ret

0000340a <HKPD_vInit>:
#include "../../MCAL/DIO/DIO_int.h"
#include "KPD_int.h"


void HKPD_vInit(void)
{
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	00 d0       	rcall	.+0      	; 0x3410 <HKPD_vInit+0x6>
    3410:	00 d0       	rcall	.+0      	; 0x3412 <HKPD_vInit+0x8>
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
	/* Configure columns as output */
	for(u8 L_u8ColIndex = COL_INIT; L_u8ColIndex < COL_END; L_u8ColIndex++)
    3416:	1c 82       	std	Y+4, r1	; 0x04
    3418:	08 c0       	rjmp	.+16     	; 0x342a <HKPD_vInit+0x20>
	{
		MDIO_vSetPinDir(KPD_COL_PORT, L_u8ColIndex, DIO_OUTPUT);
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	6c 81       	ldd	r22, Y+4	; 0x04
    341e:	41 e0       	ldi	r20, 0x01	; 1
    3420:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>


void HKPD_vInit(void)
{
	/* Configure columns as output */
	for(u8 L_u8ColIndex = COL_INIT; L_u8ColIndex < COL_END; L_u8ColIndex++)
    3424:	8c 81       	ldd	r24, Y+4	; 0x04
    3426:	8f 5f       	subi	r24, 0xFF	; 255
    3428:	8c 83       	std	Y+4, r24	; 0x04
    342a:	8c 81       	ldd	r24, Y+4	; 0x04
    342c:	83 30       	cpi	r24, 0x03	; 3
    342e:	a8 f3       	brcs	.-22     	; 0x341a <HKPD_vInit+0x10>
	{
		MDIO_vSetPinDir(KPD_COL_PORT, L_u8ColIndex, DIO_OUTPUT);
	}

	/* Configure rows as input */
	for(u8 L_u8RowIndex = ROW_INIT; L_u8RowIndex < ROW_END; L_u8RowIndex++)
    3430:	84 e0       	ldi	r24, 0x04	; 4
    3432:	8b 83       	std	Y+3, r24	; 0x03
    3434:	08 c0       	rjmp	.+16     	; 0x3446 <HKPD_vInit+0x3c>
	{
		MDIO_vSetPinDir(KPD_ROW_PORT, L_u8RowIndex, DIO_INPUT);
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	6b 81       	ldd	r22, Y+3	; 0x03
    343a:	40 e0       	ldi	r20, 0x00	; 0
    343c:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_vSetPinDir>
	{
		MDIO_vSetPinDir(KPD_COL_PORT, L_u8ColIndex, DIO_OUTPUT);
	}

	/* Configure rows as input */
	for(u8 L_u8RowIndex = ROW_INIT; L_u8RowIndex < ROW_END; L_u8RowIndex++)
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	8f 5f       	subi	r24, 0xFF	; 255
    3444:	8b 83       	std	Y+3, r24	; 0x03
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	88 30       	cpi	r24, 0x08	; 8
    344a:	a8 f3       	brcs	.-22     	; 0x3436 <HKPD_vInit+0x2c>
	{
		MDIO_vSetPinDir(KPD_ROW_PORT, L_u8RowIndex, DIO_INPUT);
	}

	/* Set columns val to high */
	for(u8 L_u8ColIndex = COL_INIT; L_u8ColIndex < COL_END; L_u8ColIndex++)
    344c:	1a 82       	std	Y+2, r1	; 0x02
    344e:	08 c0       	rjmp	.+16     	; 0x3460 <HKPD_vInit+0x56>
	{
		MDIO_vSetPinVal(KPD_COL_PORT, L_u8ColIndex, DIO_HIGH);
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	6a 81       	ldd	r22, Y+2	; 0x02
    3454:	41 e0       	ldi	r20, 0x01	; 1
    3456:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	{
		MDIO_vSetPinDir(KPD_ROW_PORT, L_u8RowIndex, DIO_INPUT);
	}

	/* Set columns val to high */
	for(u8 L_u8ColIndex = COL_INIT; L_u8ColIndex < COL_END; L_u8ColIndex++)
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	8f 5f       	subi	r24, 0xFF	; 255
    345e:	8a 83       	std	Y+2, r24	; 0x02
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	83 30       	cpi	r24, 0x03	; 3
    3464:	a8 f3       	brcs	.-22     	; 0x3450 <HKPD_vInit+0x46>
	{
		MDIO_vSetPinVal(KPD_COL_PORT, L_u8ColIndex, DIO_HIGH);
	}

	/* Activate pull-up resistor on input pins */
	for(u8 L_u8RowIndex = ROW_INIT; L_u8RowIndex < ROW_END; L_u8RowIndex++)
    3466:	84 e0       	ldi	r24, 0x04	; 4
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	08 c0       	rjmp	.+16     	; 0x347c <HKPD_vInit+0x72>
	{
		MDIO_vSetPinVal(KPD_ROW_PORT, L_u8RowIndex, DIO_HIGH);
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	69 81       	ldd	r22, Y+1	; 0x01
    3470:	41 e0       	ldi	r20, 0x01	; 1
    3472:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>
	{
		MDIO_vSetPinVal(KPD_COL_PORT, L_u8ColIndex, DIO_HIGH);
	}

	/* Activate pull-up resistor on input pins */
	for(u8 L_u8RowIndex = ROW_INIT; L_u8RowIndex < ROW_END; L_u8RowIndex++)
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	8f 5f       	subi	r24, 0xFF	; 255
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	88 30       	cpi	r24, 0x08	; 8
    3480:	a8 f3       	brcs	.-22     	; 0x346c <HKPD_vInit+0x62>
	{
		MDIO_vSetPinVal(KPD_ROW_PORT, L_u8RowIndex, DIO_HIGH);
	}
}
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <HKPD_u8GetPressedKey>:

u8 HKPD_u8GetPressedKey(const u8 KeyMap[KPD_ROWS][KPD_COLS])
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	63 97       	sbiw	r28, 0x13	; 19
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	9b 8b       	std	Y+19, r25	; 0x13
    34a6:	8a 8b       	std	Y+18, r24	; 0x12
	u8 L_u8PressedKey = NO_KEY;
    34a8:	8f ef       	ldi	r24, 0xFF	; 255
    34aa:	89 8b       	std	Y+17, r24	; 0x11

	for(u8 col = COL_INIT; col < COL_END; col++)
    34ac:	18 8a       	std	Y+16, r1	; 0x10
    34ae:	ad c0       	rjmp	.+346    	; 0x360a <HKPD_u8GetPressedKey+0x17a>
	{
		/* Activate current Column */
		MDIO_vSetPinVal(KPD_COL_PORT, col, DIO_LOW);
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	68 89       	ldd	r22, Y+16	; 0x10
    34b4:	40 e0       	ldi	r20, 0x00	; 0
    34b6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>

		/* Check all rows */
		for(u8 row = ROW_INIT; row < ROW_END; row++)
    34ba:	84 e0       	ldi	r24, 0x04	; 4
    34bc:	8f 87       	std	Y+15, r24	; 0x0f
    34be:	99 c0       	rjmp	.+306    	; 0x35f2 <HKPD_u8GetPressedKey+0x162>
		{
			/* if switch is pressed */
			if(MDIO_u8GETPinVal(KPD_ROW_PORT, row) == 0)
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    34c4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <MDIO_u8GETPinVal>
    34c8:	88 23       	and	r24, r24
    34ca:	09 f0       	breq	.+2      	; 0x34ce <HKPD_u8GetPressedKey+0x3e>
    34cc:	8f c0       	rjmp	.+286    	; 0x35ec <HKPD_u8GetPressedKey+0x15c>
			{
				/* if switch is still pressed (wait for release) */
				while(MDIO_u8GETPinVal(KPD_ROW_PORT, row) == 0);
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    34d2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <MDIO_u8GETPinVal>
    34d6:	88 23       	and	r24, r24
    34d8:	d1 f3       	breq	.-12     	; 0x34ce <HKPD_u8GetPressedKey+0x3e>
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	a0 e2       	ldi	r26, 0x20	; 32
    34e0:	b1 e4       	ldi	r27, 0x41	; 65
    34e2:	8b 87       	std	Y+11, r24	; 0x0b
    34e4:	9c 87       	std	Y+12, r25	; 0x0c
    34e6:	ad 87       	std	Y+13, r26	; 0x0d
    34e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	4a ef       	ldi	r20, 0xFA	; 250
    34f8:	54 e4       	ldi	r21, 0x44	; 68
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	8f 83       	std	Y+7, r24	; 0x07
    3504:	98 87       	std	Y+8, r25	; 0x08
    3506:	a9 87       	std	Y+9, r26	; 0x09
    3508:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    350a:	6f 81       	ldd	r22, Y+7	; 0x07
    350c:	78 85       	ldd	r23, Y+8	; 0x08
    350e:	89 85       	ldd	r24, Y+9	; 0x09
    3510:	9a 85       	ldd	r25, Y+10	; 0x0a
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	40 e8       	ldi	r20, 0x80	; 128
    3518:	5f e3       	ldi	r21, 0x3F	; 63
    351a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    351e:	88 23       	and	r24, r24
    3520:	2c f4       	brge	.+10     	; 0x352c <HKPD_u8GetPressedKey+0x9c>
		__ticks = 1;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	9e 83       	std	Y+6, r25	; 0x06
    3528:	8d 83       	std	Y+5, r24	; 0x05
    352a:	3f c0       	rjmp	.+126    	; 0x35aa <HKPD_u8GetPressedKey+0x11a>
	else if (__tmp > 65535)
    352c:	6f 81       	ldd	r22, Y+7	; 0x07
    352e:	78 85       	ldd	r23, Y+8	; 0x08
    3530:	89 85       	ldd	r24, Y+9	; 0x09
    3532:	9a 85       	ldd	r25, Y+10	; 0x0a
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	3f ef       	ldi	r19, 0xFF	; 255
    3538:	4f e7       	ldi	r20, 0x7F	; 127
    353a:	57 e4       	ldi	r21, 0x47	; 71
    353c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3540:	18 16       	cp	r1, r24
    3542:	4c f5       	brge	.+82     	; 0x3596 <HKPD_u8GetPressedKey+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3544:	6b 85       	ldd	r22, Y+11	; 0x0b
    3546:	7c 85       	ldd	r23, Y+12	; 0x0c
    3548:	8d 85       	ldd	r24, Y+13	; 0x0d
    354a:	9e 85       	ldd	r25, Y+14	; 0x0e
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e2       	ldi	r20, 0x20	; 32
    3552:	51 e4       	ldi	r21, 0x41	; 65
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	bc 01       	movw	r22, r24
    355e:	cd 01       	movw	r24, r26
    3560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	9e 83       	std	Y+6, r25	; 0x06
    356a:	8d 83       	std	Y+5, r24	; 0x05
    356c:	0f c0       	rjmp	.+30     	; 0x358c <HKPD_u8GetPressedKey+0xfc>
    356e:	88 ec       	ldi	r24, 0xC8	; 200
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	9c 83       	std	Y+4, r25	; 0x04
    3574:	8b 83       	std	Y+3, r24	; 0x03
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	9c 81       	ldd	r25, Y+4	; 0x04
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	f1 f7       	brne	.-4      	; 0x357a <HKPD_u8GetPressedKey+0xea>
    357e:	9c 83       	std	Y+4, r25	; 0x04
    3580:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	9e 83       	std	Y+6, r25	; 0x06
    358a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358c:	8d 81       	ldd	r24, Y+5	; 0x05
    358e:	9e 81       	ldd	r25, Y+6	; 0x06
    3590:	00 97       	sbiw	r24, 0x00	; 0
    3592:	69 f7       	brne	.-38     	; 0x356e <HKPD_u8GetPressedKey+0xde>
    3594:	14 c0       	rjmp	.+40     	; 0x35be <HKPD_u8GetPressedKey+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3596:	6f 81       	ldd	r22, Y+7	; 0x07
    3598:	78 85       	ldd	r23, Y+8	; 0x08
    359a:	89 85       	ldd	r24, Y+9	; 0x09
    359c:	9a 85       	ldd	r25, Y+10	; 0x0a
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9e 83       	std	Y+6, r25	; 0x06
    35a8:	8d 83       	std	Y+5, r24	; 0x05
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	9e 81       	ldd	r25, Y+6	; 0x06
    35ae:	9a 83       	std	Y+2, r25	; 0x02
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	9a 81       	ldd	r25, Y+2	; 0x02
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <HKPD_u8GetPressedKey+0x126>
    35ba:	9a 83       	std	Y+2, r25	; 0x02
    35bc:	89 83       	std	Y+1, r24	; 0x01

				/* Debouncing */
				_delay_ms(10);

				/* Action */
				L_u8PressedKey = KeyMap[row-ROW_INIT][col];
    35be:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c0:	28 2f       	mov	r18, r24
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	c9 01       	movw	r24, r18
    35c6:	88 0f       	add	r24, r24
    35c8:	99 1f       	adc	r25, r25
    35ca:	82 0f       	add	r24, r18
    35cc:	93 1f       	adc	r25, r19
    35ce:	9c 01       	movw	r18, r24
    35d0:	2c 50       	subi	r18, 0x0C	; 12
    35d2:	30 40       	sbci	r19, 0x00	; 0
    35d4:	8a 89       	ldd	r24, Y+18	; 0x12
    35d6:	9b 89       	ldd	r25, Y+19	; 0x13
    35d8:	28 0f       	add	r18, r24
    35da:	39 1f       	adc	r19, r25
    35dc:	88 89       	ldd	r24, Y+16	; 0x10
    35de:	88 2f       	mov	r24, r24
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	f9 01       	movw	r30, r18
    35e4:	e8 0f       	add	r30, r24
    35e6:	f9 1f       	adc	r31, r25
    35e8:	80 81       	ld	r24, Z
    35ea:	89 8b       	std	Y+17, r24	; 0x11
	{
		/* Activate current Column */
		MDIO_vSetPinVal(KPD_COL_PORT, col, DIO_LOW);

		/* Check all rows */
		for(u8 row = ROW_INIT; row < ROW_END; row++)
    35ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ee:	8f 5f       	subi	r24, 0xFF	; 255
    35f0:	8f 87       	std	Y+15, r24	; 0x0f
    35f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f4:	88 30       	cpi	r24, 0x08	; 8
    35f6:	08 f4       	brcc	.+2      	; 0x35fa <HKPD_u8GetPressedKey+0x16a>
    35f8:	63 cf       	rjmp	.-314    	; 0x34c0 <HKPD_u8GetPressedKey+0x30>
				L_u8PressedKey = KeyMap[row-ROW_INIT][col];

			}
		}
		/* Deactivate current Column */
		MDIO_vSetPinVal(KPD_COL_PORT, col, DIO_HIGH);
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	68 89       	ldd	r22, Y+16	; 0x10
    35fe:	41 e0       	ldi	r20, 0x01	; 1
    3600:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MDIO_vSetPinVal>

u8 HKPD_u8GetPressedKey(const u8 KeyMap[KPD_ROWS][KPD_COLS])
{
	u8 L_u8PressedKey = NO_KEY;

	for(u8 col = COL_INIT; col < COL_END; col++)
    3604:	88 89       	ldd	r24, Y+16	; 0x10
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	88 8b       	std	Y+16, r24	; 0x10
    360a:	88 89       	ldd	r24, Y+16	; 0x10
    360c:	83 30       	cpi	r24, 0x03	; 3
    360e:	08 f4       	brcc	.+2      	; 0x3612 <HKPD_u8GetPressedKey+0x182>
    3610:	4f cf       	rjmp	.-354    	; 0x34b0 <HKPD_u8GetPressedKey+0x20>
			}
		}
		/* Deactivate current Column */
		MDIO_vSetPinVal(KPD_COL_PORT, col, DIO_HIGH);
	}
	return L_u8PressedKey;
    3612:	89 89       	ldd	r24, Y+17	; 0x11

}
    3614:	63 96       	adiw	r28, 0x13	; 19
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <__divmodsi4>:
    3626:	97 fb       	bst	r25, 7
    3628:	09 2e       	mov	r0, r25
    362a:	05 26       	eor	r0, r21
    362c:	0e d0       	rcall	.+28     	; 0x364a <__divmodsi4_neg1>
    362e:	57 fd       	sbrc	r21, 7
    3630:	04 d0       	rcall	.+8      	; 0x363a <__divmodsi4_neg2>
    3632:	14 d0       	rcall	.+40     	; 0x365c <__udivmodsi4>
    3634:	0a d0       	rcall	.+20     	; 0x364a <__divmodsi4_neg1>
    3636:	00 1c       	adc	r0, r0
    3638:	38 f4       	brcc	.+14     	; 0x3648 <__divmodsi4_exit>

0000363a <__divmodsi4_neg2>:
    363a:	50 95       	com	r21
    363c:	40 95       	com	r20
    363e:	30 95       	com	r19
    3640:	21 95       	neg	r18
    3642:	3f 4f       	sbci	r19, 0xFF	; 255
    3644:	4f 4f       	sbci	r20, 0xFF	; 255
    3646:	5f 4f       	sbci	r21, 0xFF	; 255

00003648 <__divmodsi4_exit>:
    3648:	08 95       	ret

0000364a <__divmodsi4_neg1>:
    364a:	f6 f7       	brtc	.-4      	; 0x3648 <__divmodsi4_exit>
    364c:	90 95       	com	r25
    364e:	80 95       	com	r24
    3650:	70 95       	com	r23
    3652:	61 95       	neg	r22
    3654:	7f 4f       	sbci	r23, 0xFF	; 255
    3656:	8f 4f       	sbci	r24, 0xFF	; 255
    3658:	9f 4f       	sbci	r25, 0xFF	; 255
    365a:	08 95       	ret

0000365c <__udivmodsi4>:
    365c:	a1 e2       	ldi	r26, 0x21	; 33
    365e:	1a 2e       	mov	r1, r26
    3660:	aa 1b       	sub	r26, r26
    3662:	bb 1b       	sub	r27, r27
    3664:	fd 01       	movw	r30, r26
    3666:	0d c0       	rjmp	.+26     	; 0x3682 <__udivmodsi4_ep>

00003668 <__udivmodsi4_loop>:
    3668:	aa 1f       	adc	r26, r26
    366a:	bb 1f       	adc	r27, r27
    366c:	ee 1f       	adc	r30, r30
    366e:	ff 1f       	adc	r31, r31
    3670:	a2 17       	cp	r26, r18
    3672:	b3 07       	cpc	r27, r19
    3674:	e4 07       	cpc	r30, r20
    3676:	f5 07       	cpc	r31, r21
    3678:	20 f0       	brcs	.+8      	; 0x3682 <__udivmodsi4_ep>
    367a:	a2 1b       	sub	r26, r18
    367c:	b3 0b       	sbc	r27, r19
    367e:	e4 0b       	sbc	r30, r20
    3680:	f5 0b       	sbc	r31, r21

00003682 <__udivmodsi4_ep>:
    3682:	66 1f       	adc	r22, r22
    3684:	77 1f       	adc	r23, r23
    3686:	88 1f       	adc	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	1a 94       	dec	r1
    368c:	69 f7       	brne	.-38     	; 0x3668 <__udivmodsi4_loop>
    368e:	60 95       	com	r22
    3690:	70 95       	com	r23
    3692:	80 95       	com	r24
    3694:	90 95       	com	r25
    3696:	9b 01       	movw	r18, r22
    3698:	ac 01       	movw	r20, r24
    369a:	bd 01       	movw	r22, r26
    369c:	cf 01       	movw	r24, r30
    369e:	08 95       	ret

000036a0 <__prologue_saves__>:
    36a0:	2f 92       	push	r2
    36a2:	3f 92       	push	r3
    36a4:	4f 92       	push	r4
    36a6:	5f 92       	push	r5
    36a8:	6f 92       	push	r6
    36aa:	7f 92       	push	r7
    36ac:	8f 92       	push	r8
    36ae:	9f 92       	push	r9
    36b0:	af 92       	push	r10
    36b2:	bf 92       	push	r11
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	0f 93       	push	r16
    36be:	1f 93       	push	r17
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	ca 1b       	sub	r28, r26
    36ca:	db 0b       	sbc	r29, r27
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	de bf       	out	0x3e, r29	; 62
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	cd bf       	out	0x3d, r28	; 61
    36d6:	09 94       	ijmp

000036d8 <__epilogue_restores__>:
    36d8:	2a 88       	ldd	r2, Y+18	; 0x12
    36da:	39 88       	ldd	r3, Y+17	; 0x11
    36dc:	48 88       	ldd	r4, Y+16	; 0x10
    36de:	5f 84       	ldd	r5, Y+15	; 0x0f
    36e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    36e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    36e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    36e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    36e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    36ea:	b9 84       	ldd	r11, Y+9	; 0x09
    36ec:	c8 84       	ldd	r12, Y+8	; 0x08
    36ee:	df 80       	ldd	r13, Y+7	; 0x07
    36f0:	ee 80       	ldd	r14, Y+6	; 0x06
    36f2:	fd 80       	ldd	r15, Y+5	; 0x05
    36f4:	0c 81       	ldd	r16, Y+4	; 0x04
    36f6:	1b 81       	ldd	r17, Y+3	; 0x03
    36f8:	aa 81       	ldd	r26, Y+2	; 0x02
    36fa:	b9 81       	ldd	r27, Y+1	; 0x01
    36fc:	ce 0f       	add	r28, r30
    36fe:	d1 1d       	adc	r29, r1
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	cd bf       	out	0x3d, r28	; 61
    370a:	ed 01       	movw	r28, r26
    370c:	08 95       	ret

0000370e <_exit>:
    370e:	f8 94       	cli

00003710 <__stop_program>:
    3710:	ff cf       	rjmp	.-2      	; 0x3710 <__stop_program>
